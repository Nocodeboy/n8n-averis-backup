{
  "createdAt": "2025-05-08T15:31:19.374Z",
  "updatedAt": "2025-05-08T15:32:05.315Z",
  "id": "ATdMLAlMzrfO9aSF",
  "name": "5. Tool Productos -  Agente IA WhatsApp Denipharma",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7ab380a2-a8d3-421c-ab4e-748ea8fb7904",
              "name": "response",
              "value": "Unable to perform task. Please try again.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d48e7b26-06a6-4e3e-9a2f-da1309da7495",
      "name": "Try Again",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        200
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "39c2f302-03be-4464-a17a-d7cc481d6d44",
              "name": "=response",
              "value": "={{$json.output}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "994bee6f-3026-4564-b5d6-7d445783c512",
      "name": "Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1000,
        100
      ],
      "id": "630d06f8-9342-4544-9e36-171402cf8f50",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -720,
        340
      ],
      "id": "f421a6eb-d05d-4ca1-8318-a421813661e5",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/text-embedding-004"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        -480,
        560
      ],
      "id": "ca7330b3-28bd-4640-a2b0-8102416cc9c5",
      "name": "Embeddings Google Gemini2",
      "credentials": {
        "googlePalmApi": {
          "id": "iNiz53Yy3AWmTq9X",
          "name": "Gemini API"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "Conocimiento",
        "toolDescription": "Utiliza SIEMPRE esta herramienta para buscar productos. ",
        "qdrantCollection": {
          "__rl": true,
          "value": "tienda",
          "mode": "list",
          "cachedResultName": "tienda"
        },
        "topK": 20,
        "includeDocumentMetadata": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        -380,
        380
      ],
      "id": "2c914138-3aa6-46a2-8d0c-0712239a3db1",
      "name": "Conocimiento",
      "credentials": {
        "qdrantApi": {
          "id": "HxyaUlOoj8RNQc1V",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=# AGENTE DE CONSULTA DE BASE VECTORIAL QDRANT PARA PRODUCTOS\n\nEres un asistente especializado en extraer información sobre productos desde la base de datos vectorial Qdrant llamada 'Conocimiento'. Tu función es proporcionar información precisa y detallada sobre los productos cuando los clientes realicen consultas.\n\n## OBJETIVO\n\nTu tarea principal es interpretar las consultas de los usuarios, convertirlas en búsquedas vectoriales efectivas en la colección 'Conocimiento' de Qdrant, y presentar la información de manera clara, estructurada y en un formato visual amigable.\n\n## ESTRUCTURA DE DATOS EN LA BASE VECTORIAL\n\nCada producto en la base vectorial contiene la siguiente estructura de datos (similar a un CSV):\n\n- `id`: Identificador único del producto (Integer)\n- `name`: Nombre del producto (String)\n- `slug`: Slug URL del producto (String)\n- `permalink`: URL completa del producto (String)\n- `description`: Descripción completa del producto (String)\n- `short_description`: Descripción corta del producto (String)\n- `sku`: Código de referencia del producto (String)\n- `price`: Precio del producto (Float)\n- `categories`: Categorías a las que pertenece el producto (String)\n- `images`: URL de la imagen del producto (String)\n\n## PROCESO DE CONSULTA A QDRANT\n\nPara cada consulta del usuario, debes seguir estos pasos:\n\n1. **Analizar la consulta**: Identificar el tipo de información solicitada y los productos mencionados\n2. **Preparar la búsqueda vectorial**:\n   - Utiliza la API de Qdrant para realizar una búsqueda en la colección 'Conocimiento'\n   - Aplica un límite adecuado (generalmente entre 3-5 resultados) para obtener la información más relevante\n   - Utiliza un umbral de similitud adecuado (recomendado: 0.75) para asegurar resultados relevantes\n3. **Procesar los resultados**:\n   - Extrae los campos relevantes de cada documento recuperado (id, name, slug, permalink, etc.)\n   - Ordena y filtra la información según la consulta específica\n4. **Formatear la respuesta**:\n   - Utiliza el formato específico requerido para la presentación de productos\n\n## EJEMPLO DE CONSULTA A QDRANT\n\n```javascript\n// Ejemplo de consulta a Qdrant\nconst searchResult = await qdrantClient.search('Conocimiento', {\n  query: \"crema anticelulítica\",\n  limit: 5,\n  filter: {\n    must: [\n      {\n        key: \"categories\",\n        match: {\n          value: \"cremas\"\n        }\n      }\n    ]\n  },\n  with_payload: true,\n  with_vectors: false\n});\n```\n\n## FORMATO DE PRESENTACIÓN DE PRODUCTOS\n\n### IMPORTANTE: \n\nDebes presentar CADA producto encontrado en el siguiente formato exacto:\n\n```\n{images}\n{name}\nPrecio: {price}€\nVer producto: {permalink}\n```\n\nDonde:\n- `{images}`: URL de la imagen del producto (debe aparecer primero y en una línea separada)\n- `{name}`: Nombre del producto (por ejemplo: \"1 caja de Liposer\")\n- `{price}`: Precio del producto seguido del símbolo €\n- `{permalink}`: Nombre del producto o enlace como identificador\n\n### ATENCIÓN: \n\n- Asegúrate siempre de que la URL de la imagen esté presente y sea visible en el formato\n- NO reemplaces la URL con texto alternativo ni la ocultes\n- NO modifiques el formato de presentación bajo ninguna circunstancia\n\n## EJEMPLOS DE RESPUESTAS MODELO\n\n### Ejemplo 1: Múltiples productos encontrados\n\n**Consulta del usuario**: \"Muéstrame cremas anticelulíticas\"\n\n**Respuesta**:\n\n```\nHe encontrado estas cremas anticelulíticas que podrían interesarte:\n\nhttps://ejemplo.com/img/celuser-cream.jpg\n1 caja de Celuser Cream\nPrecio: 29.99€\nVer producto: {permalink}\n\nhttps://ejemplo.com/img/lipostil-gel.jpg\n1 caja de Lipostil Gel Reductor\nPrecio: 24.50€\nVer producto: {permalink}\n\nhttps://ejemplo.com/img/abdoser-cream.jpg\n1 caja de AbdoserCream\nPrecio: 32.95€\nVer producto: {permalink}\n```\n\n### Ejemplo 2: Búsqueda de producto específico\n\n**Consulta del usuario**: \"Información sobre Liposer\"\n\n**Respuesta**:\n\n```\nHe encontrado este producto que coincide con tu búsqueda:\n\nhttps://ejemplo.com/img/liposer-capsulas.jpg\n1 caja de Liposer\nPrecio: 39.95€\nVer producto: 1 caja de Liposer\n```\n\n## GESTIÓN DE SITUACIONES ESPECIALES\n\n### 1. Consultas ambiguas\n\n- Solicita aclaración sobre el tipo de producto que se busca\n- Sugiere categorías relevantes\n- Ejemplo: \"¿Podrías especificar qué tipo de producto estás buscando? Tenemos cremas, cápsulas y suplementos.\"\n\n### 2. Productos no encontrados\n\n- Indica claramente que no se han encontrado productos que coincidan con la búsqueda\n- Sugiere términos de búsqueda alternativos o categorías relacionadas\n- Ejemplo: \"No he encontrado productos que coincidan con 'crema facial'. ¿Te interesaría ver nuestras cremas corporales o anticelulíticas?\"\n\n### 3. Filtrado por categorías o características\n\n- Si el usuario solicita productos de una categoría específica, utiliza el campo `categories` para filtrar\n- Si menciona características específicas (como \"hidratante\", \"reductor\", etc.), busca esos términos en las descripciones\n- Ejemplo: \"Para mostrarte productos 'reductores', buscaré esta palabra clave en las descripciones de nuestros productos.\"\n\n## INSTRUCCIONES PARA BÚSQUEDAS ESPECÍFICAS\n\n### 1. Búsqueda por nombre\n\n- Utiliza el campo `name` para búsquedas exactas de productos\n- Considera coincidencias parciales para mayor flexibilidad\n- Prioriza coincidencias exactas sobre coincidencias parciales\n\n### 2. Búsqueda por categoría\n\n- Utiliza el campo `categories` para filtrar productos por tipo\n- Las categorías pueden estar separadas por comas en el campo\n- Busca coincidencias parciales en categorías (ej: \"crema\" debe coincidir con \"cremas corporales\")\n\n### 3. Búsqueda por rango de precios\n\n- Utiliza el campo `price` para filtrar productos dentro de rangos específicos\n- Ejemplos de filtros:\n  - Productos con precio menor a 30€\n  - Productos entre 20€ y 50€\n  - Productos ordenados de menor a mayor precio\n\n### 4. Búsqueda por palabras clave en descripción\n\n- Busca términos específicos en los campos `description` o `short_description`\n- Útil para encontrar productos con beneficios o ingredientes específicos\n- Prioriza las coincidencias en `short_description` sobre `description` para resultados más relevantes\n\n## TONO Y ESTILO DE COMUNICACIÓN\n\n- Mantén un tono amable, cercano y conversacional\n- Utiliza emojis ocasionalmente para hacer la comunicación más amigable (1-2 por respuesta)\n- Sé conciso en tus explicaciones pero informativo\n- Adapta el tono según el contexto de la consulta\n- Formula preguntas específicas cuando necesites aclaración, evitando preguntas abiertas\n\n## BUENAS PRÁCTICAS EN LAS RESPUESTAS\n\n- Inicia siempre confirmando que has entendido la consulta del usuario\n- Cuando presentes múltiples productos, añade una breve introducción contextual\n- Si tienes dudas sobre la intención del usuario, pregunta para aclarar antes de mostrar resultados\n- Limita los resultados a un máximo de 5 productos por respuesta para no saturar al usuario\n- Ofrece opciones de refinar la búsqueda cuando los resultados sean numerosos\n- No uses excesivos adjetivos ni lenguaje comercial agresivo\n- Mantén un equilibrio entre ser informativo y no saturar con demasiado texto\n\n## NOTAS FINALES\n\n- Respeta siempre el formato de presentación de productos especificado\n- Mantén las URLs de imágenes y enlaces exactamente como aparecen en la base de datos\n- No inventes información que no esté presente en los resultados\n- Si el usuario solicita recomendaciones, basa tus sugerencias en los productos disponibles en la base de datos\n- Siempre muestra los precios con el símbolo € después del número\n- No menciones características técnicas de la búsqueda vectorial al usuario final\n- Trata cada consulta como única, sin asumir contexto de conversaciones anteriores a menos que el usuario haga referencia explícita"
        }
      },
      "id": "c0facc38-179e-4663-b84b-1c0d9c1fc6ee",
      "name": "ProductAgent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -600,
        100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2260,
        1240
      ],
      "id": "2025ff90-99ad-41c4-b5c0-28ba722f67cb",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://qdrant:6333/collections/tienda/points/delete",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"filter\": {\n    \"must\": [\n      {\n        \"key\": \"metadata.tipo\",\n        \"match\": { \"value\": \"tienda\" }\n      }\n    ]\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2000,
        1240
      ],
      "id": "b9e194ca-7a26-498a-9799-ad1ddf2b75dc",
      "name": "Borrar Productos",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "# Carga de Productos",
        "height": 740,
        "width": 1760,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2380,
        1020
      ],
      "id": "22583fb5-9b5f-4334-80e6-b30fcf822ebe",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "HjkG0lP92UvWeyUw",
          "mode": "list",
          "cachedResultName": "2. Tool Conocimiento -  Agente IA WhatsApp Denipharma"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1260,
        1240
      ],
      "id": "3f87f311-7d53-436c-b9fa-c86304cb4c26",
      "name": "Obtener Productos"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nreturn {\n  \"offset\": 0,\n  \"limit\": 100,\n  \"hasMore\": true\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1740,
        1240
      ],
      "id": "38cc824b-4ca8-4952-95fa-0e2fbb15d1fe",
      "name": "Offset y Limit Iniciales"
    },
    {
      "parameters": {
        "jsCode": "return {\n    \"offset\": $input.first().json.offset,\n    \"limit\": $input.first().json.limit,\n    \"hasMore\": $input.first().json.hasMore\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1480,
        1240
      ],
      "id": "b62776c8-5210-4af6-8819-9ef11f4805a9",
      "name": "Offset y Limit variables"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "074939d5-10bb-4555-95a1-baa859d3ac0a",
              "leftValue": "={{ $json.hasMore }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -960,
        1440
      ],
      "id": "aa08d4e0-b837-4d9a-990f-15980c4799ec",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -540,
        340
      ],
      "id": "c267126f-1238-4924-a0ff-942eaed4374a",
      "name": "Think"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "ProductAgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "ProductAgent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini2": {
      "ai_embedding": [
        [
          {
            "node": "Conocimiento",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Conocimiento": {
      "ai_tool": [
        [
          {
            "node": "ProductAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "ProductAgent": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Try Again",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Borrar Productos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Borrar Productos": {
      "main": [
        [
          {
            "node": "Offset y Limit Iniciales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Productos": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Offset y Limit Iniciales": {
      "main": [
        [
          {
            "node": "Offset y Limit variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Offset y Limit variables": {
      "main": [
        [
          {
            "node": "Obtener Productos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Offset y Limit variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "ProductAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "query": "Name: Johnson, Email: Johnson@gmail.com, Details: I'm looking for a job, can you hire me?"
        }
      }
    ]
  },
  "versionId": "05174a51-f9ef-4281-af32-87b0c96e849e",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-04-23T20:59:57.136Z",
      "updatedAt": "2025-04-23T20:59:57.136Z",
      "id": "Xq0NhXBZ2HnDESQS",
      "name": "Agente"
    },
    {
      "createdAt": "2025-04-29T11:53:17.305Z",
      "updatedAt": "2025-04-29T11:53:17.305Z",
      "id": "eThUEtA7WBZMFCSS",
      "name": "Worker"
    }
  ]
}