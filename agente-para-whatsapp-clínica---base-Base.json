{
  "createdAt": "2025-05-08T19:29:09.896Z",
  "updatedAt": "2025-05-14T16:32:45.496Z",
  "id": "ykqLSGPThcvVdGo3",
  "name": "Agente para WhatsApp Clínica - Base",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-nano-2025-04-14",
          "cachedResultName": "gpt-4.1-nano-2025-04-14"
        },
        "options": {}
      },
      "id": "ea02daa1-fa82-4d55-8874-3d78becc3467",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        3220,
        440
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "task": "bDQ5ZlNVV2lPQ3pYT3NsNA",
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "additionalFields": {
          "notes": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Notes', ``, 'string') }}",
          "status": "needsAction"
        }
      },
      "id": "cd348e26-c882-4c17-9005-0c6081aa0071",
      "name": "Google Tasks",
      "type": "n8n-nodes-base.googleTasksTool",
      "position": [
        3680,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sseEndpoint": "https://engaging-seahorse-19.rshare.io/mcp/ceb17fa5-1937-405f-8000-ea3be7d2b032/mcp/:tool/calendar/sse"
      },
      "id": "e63d784f-6b26-4248-b07c-de67023bf56b",
      "name": "MCP Google Calendar",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "position": [
        3520,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "100",
        "contextWindowLength": 10
      },
      "id": "62a3d968-cbd2-4481-8e66-fa53ecf48a35",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "position": [
        3380,
        480
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini-2025-04-14",
          "cachedResultName": "gpt-4.1-mini-2025-04-14"
        },
        "options": {}
      },
      "id": "f9b39cdf-aa82-487a-a09a-785c53ccf5a6",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        840,
        2180
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=\"You are a specialist in formatting messages for WhatsApp, working only on the formatting and not altering the message content.\n\nReplace ** with *\n\nRemove #\""
        }
      },
      "id": "454ac09f-29f1-4842-9b7e-eda2daee0d98",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1000,
        2480
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "content": "# \"Appointment Confirmation Assistant\"\nDescription:\n\nPurpose:\nThis section contains the configuration for the Appointment Confirmation Assistant, an agent specialized in confirming scheduled appointments with patients.\n\nInstructions for Use:\n\nIt is triggered automatically every weekday (Monday to Friday) at 08:00 AM via the Daily Trigger (Gatilho diário).\n\nThe agent retrieves all appointments scheduled for the next day using MCP Google Calendar.\n\nIt extracts each patient's phone number from the event description field.\n\nA confirmation message is sent to each patient using the relembraAGENDAMENTO tool, asking for confirmation or rescheduling.\n\nImportant: This agent does not handle responses from patients; another agent or workflow is responsible for follow-ups.\n\nMake sure event descriptions in Google Calendar are correctly filled to avoid errors.\n\n",
        "height": 600,
        "width": 1940,
        "color": 5
      },
      "id": "d2c1c319-a0ff-4902-b43a-2540b0236ea3",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1940,
        780
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# \"Agent Core Components (Tools, MCP, Memory, LLM Model)\"\nDescription:\n\nPurpose:\n\nThis sticky note represents the essential structure of any intelligent agent: it includes access to external tools,\n persistent memory, the MCP system for calendar management, and a Language Model (LLM) to process natural language tasks.\n\nInstructions for Use:\n\nLanguage Model nodes (OpenAI, OpenRouter) are responsible for natural language understanding and generation.\n\nMemory nodes (Postgres Chat Memory) maintain conversation context over multiple interactions.\n\nMCP Tools interact with Google Calendar and other services to perform real-world actions.\n\nAlways ensure memory synchronization between the agent's context and actions performed.\n\nIf new tools are added, they must be connected both to the agent and properly described in the system message.\n\n",
        "height": 540,
        "width": 1720,
        "color": 3
      },
      "id": "ba2439b2-2e06-444b-8bea-3c8874e73bcf",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -140,
        1840
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# \"Processing and Sending WhatsApp Responses\"\nDescription:\n\nPurpose:\nThis section is responsible for processing, formatting, and sending outbound WhatsApp messages to patients through the Evolution API.\n\nInstructions for Use:\n\nMessages received from the assistant agent are first reformatted by the AI Agent node to comply with WhatsApp markdown syntax (e.g., replacing **bold** with *bold*).\n\nOnce formatted, the messages are forwarded to WhatsApp using the Evolution API2 node.\n\nEnsure proper formatting before sending to maintain a professional communication tone and avoid delivery errors.\n\nAny future text-processing improvements should be implemented here.",
        "height": 520,
        "width": 1680,
        "color": 4
      },
      "id": "e8c6cbf2-5f22-402b-9e17-8de1b3f06bff",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -120,
        2440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "= {{ $('Webhook1').item.json.body.data.key.id }}",
        "contextWindowLength": 50
      },
      "id": "3a0c31ca-82d5-481f-b323-9e5e4d11258e",
      "name": "Postgres Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "position": [
        980,
        2180
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "sseEndpoint": "https://engaging-seahorse-19.rshare.io/mcp/ceb17fa5-1937-405f-8000-ea3be7d2b032/mcp/:tool/calendar/sse"
      },
      "id": "a038ebd5-cbda-46f4-953f-93ac314e1abe",
      "name": "MCP Google Calendar2",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "position": [
        1100,
        2180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sseEndpoint": "https://engaging-seahorse-19.rshare.io/mcp/82a7a338-618c-44f5-a1c3-f2e32b6b4833/mcp/:tool/gmail/sse"
      },
      "id": "c3d23791-34c8-4d64-8826-777924491243",
      "name": "MCP GMAIL",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "position": [
        3520,
        1200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sseEndpoint": "https://engaging-seahorse-19.rshare.io/mcp/ceb17fa5-1937-405f-8000-ea3be7d2b032/mcp/:tool/calendar/sse"
      },
      "id": "d44a43a4-b70c-4aa6-a37e-0ec961f2c832",
      "name": "MCP CALENDAR",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "position": [
        3360,
        1200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "={{ $('Receive Telegram Message').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "id": "9e6e3e49-755d-48b0-9a1f-e4df1819b28e",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        3700,
        200
      ],
      "webhookId": "5bba05fc-2859-4225-aa85-7c4bc5ff532d",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "model": "google/gemini-2.0-flash-exp:free",
        "options": {}
      },
      "id": "b023eb99-65c5-45dd-90e6-d655b244d1a4",
      "name": "OpenRouter Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "position": [
        960,
        2740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "evolutionAPIKORE",
        "options": {}
      },
      "id": "954f8a1f-aaa0-4af4-a6f4-c2cf93653ee9",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "position": [
        740,
        300
      ],
      "webhookId": "405dab7c-a0ea-4f5b-a6cc-ede9d5ba78a0",
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3e6335ae-74c3-4655-b68f-cdf0c68b864f",
              "name": "number",
              "type": "string",
              "value": "={{ $json.body.data.key.remoteJid }}"
            },
            {
              "id": "15f399cf-a98e-45e7-91ce-61b4fad340fd",
              "name": "name",
              "type": "string",
              "value": "={{ $json.body.data.pushName }}"
            },
            {
              "id": "b1943003-1f47-40e1-b418-6a52557ec44e",
              "name": "key_id",
              "type": "string",
              "value": "={{ $json.body.data.key.id }}"
            },
            {
              "id": "ed23194b-22ca-455b-a085-7dae706d0569",
              "name": "text",
              "type": "string",
              "value": "={{ $json.body.data.message.conversation }}"
            },
            {
              "id": "b35f8b61-da15-42e3-a078-4cd901e1f273",
              "name": "type",
              "type": "string",
              "value": "={{ $json.body.data.message.imageMessage.mimetype }}"
            },
            {
              "id": "a62bf96a-51aa-44c3-9e5d-f592e32a31d6",
              "name": "image.url",
              "type": "string",
              "value": "={{ $json.body.data.message.imageMessage.url }}"
            },
            {
              "id": "b004987d-3527-4040-a5e6-5fe06b25c9b9",
              "name": "audio.url",
              "type": "string",
              "value": "={{ $json.body.data.message.audioMessage.url }}"
            },
            {
              "id": "4c2cc03a-c104-4a87-9d31-6a7c256890ad",
              "name": "document.url",
              "type": "string",
              "value": "={{ $json.body.data.message.documentMessage.url }}"
            }
          ]
        },
        "options": {}
      },
      "id": "70d04a04-f6a3-455e-886c-7f1cbb20f8d5",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "position": [
        980,
        300
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "2f9854ac-26b3-446c-9d0d-ae25157c61bb",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.text }}",
                    "rightValue": "="
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "73b7d93a-928e-42ec-9c8e-ae8e9b97a867",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.image.url }}",
                    "rightValue": "="
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "2f9915b9-e2b4-4528-ad36-515a848ab1be",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.audio.url }}",
                    "rightValue": "[null]"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "9fcbe89a-c9d7-4dc6-bb6f-27c1cacbfddc",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.document.url }}",
                    "rightValue": "[null]"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "document"
            }
          ]
        },
        "options": {}
      },
      "id": "eb7d1130-ac86-4f9c-8698-6989aa43cd49",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        1220,
        280
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "content": "# Incoming WhatsApp Webhook and Message Type Handling\"\nDescription:\n\nPurpose:\nManages the initial reception and classification of incoming WhatsApp messages from patients via the webhook system.\n\nInstructions for Use:\n\nThe Webhook1 node captures incoming messages.\n\nEdit Fields1 extracts structured fields such as text, image URL, audio URL, and document URL.\n\nSwitch node analyzes which type of content was received and directs the flow accordingly:\n\nText → Forwarded to the assistant for handling.\n\nImage → Sent for OCR analysis.\n\nAudio → Sent for transcription.\n\nDocument → (Currently unused, but ready for future workflows).\n\nKeep webhook credentials updated to ensure system reliability.\n\n",
        "height": 640,
        "width": 1580,
        "color": 6
      },
      "id": "263a899f-21fa-40b9-a5f2-059f239d9920",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "id": "d06fbf90-50fc-41ef-a295-8b30f88846ad",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1360,
        1460
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "options_Create_instance": {}
      },
      "id": "9c746d62-0f2c-467f-bd76-49a5b33734b5",
      "name": "Evolution API",
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "position": [
        840,
        1460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data.base64",
        "options": {}
      },
      "id": "817d9f2f-17a4-4528-a99d-1731f1d12b43",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        1080,
        1460
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "## \"Download Audio and Convert to MP4\"\nDescription:\n\nPurpose:\nHandles retrieval, conversion, and transcription of audio files sent by patients via WhatsApp.\n\nInstructions for Use:\n\nEvolution API downloads the audio in base64 format.\n\nConvert to File transforms base64 into a binary file compatible with transcription engines.\n\nOpenAI Whisper API (via OpenAI node) transcribes the audio into text, preparing it for natural language processing.\n\nEnsure audio formats are correctly handled (e.g., MP4/MP3) to avoid conversion or transcription failures.\n\nMonitor for potential heavy file size issues (>25MB) which may impact performance.",
        "height": 480,
        "width": 1620
      },
      "id": "de6d810f-c1ba-4606-903b-d47ad147bd6e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -40,
        1300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# \"Extract Text from Images\"\nDescription:\n\nPurpose:\nProcesses images received via WhatsApp to extract text (OCR) and describe their visual content for further contextual analysis.\n\nInstructions for Use:\n\nThe OpenAI1 node uses a Vision model to transcribe and describe any text or scene from incoming images.\n\nThe resulting data is interpreted by the AI Agent2, which prepares insights and recommends appropriate responses.\n\nImage-to-text extraction is especially useful for handling prescriptions, notes, or medical documents sent by patients.\n\nMaintain quality standards: images must be clear and high-resolution for best transcription results.",
        "height": 480,
        "width": 1600
      },
      "id": "a873b32d-5f15-4d23-8de8-749f6009690f",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -20,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "chatgpt-4o-latest",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "Transcribe the texts and describe the image.",
        "imageUrls": "={{ $json.image }}",
        "options": {}
      },
      "id": "48f5a361-0fd4-4924-99da-e252ff4f9bf6",
      "name": "OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        960,
        820
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.output}}",
        "options": {
          "systemMessage": "You are responsible for analyzing the content extracted from an image. The image may contain text or visual information. Your task is to:\n\nTranscribe any visible text from the image accurately.\n\nDescribe the image in clear detail, including relevant visual elements (e.g. objects, people, layout, context).\n\nBased on the content, explain or summarize the key message or purpose of the image.\n\nWhen responding to the user, be informative, concise, and helpful—always based on the image content.\n\nEnsure your responses are easy to understand and stay true to what the image shows."
        }
      },
      "id": "4bc194c6-65ec-4355-9d35-1cf169ed1f85",
      "name": "AI Agent2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1180,
        820
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-pro-exp-03-25:free",
        "options": {}
      },
      "id": "530ecc1e-bf30-4656-922b-102deaf381cd",
      "name": "OpenRouter Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "position": [
        1080,
        1060
      ],
      "typeVersion": 1,
      "credentials": {
        "openRouterApi": {
          "id": "TaWLwZCIMo3j9GPj",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "options_Create_instance": {}
      },
      "id": "d62e3714-2c0e-4c39-a0f6-7d84ef1b369c",
      "name": "Evolution API2",
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "position": [
        1380,
        2500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## \"Internal Clinic Assistant\"\nDescription:\n\nPurpose:\nRepresents the Internal Assistant for the clinic, used exclusively by the internal team via Telegram to manage patient rescheduling and manage a purchasing reminder list.\n\nInstructions for Use:\n\nTriggered by staff messages sent via Telegram.\n\nRescheduling tasks:\n\nAccess the MCP Google Calendar to locate and manage appointments.\n\nExtract patient contact from the event description.\n\nSend rescheduling messages through WhatsApp using the dedicated tool.\n\nShopping list tasks:\n\nInsert shopping list reminders into Google Tasks based on the staff's instructions.\n\nAlways maintain professional and empathetic tone when interacting with patients, even if the communication is indirect.\n\nAvoid unauthorized direct patient contact without staff permission.",
        "height": 640,
        "width": 1960
      },
      "id": "f47668bd-7860-41d9-a5ba-6cdd3986bba9",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1940,
        40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "name": "escalar_humano",
        "description": "=Use essa ferramenta ao perceber que o paciente fala de:\n- Situações urgentes (sentindo-se mal, etc.)\n- Assuntos não relacionados à clínica\n- Insatisfação extrema ou pedidos de falar com um humano\n",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "A95kslcW4H82nJuR",
          "cachedResultName": "callToHuman"
        },
        "workflowInputs": {
          "value": {
            "nome": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nome', ``, 'string') }}",
            "telefone": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('telefone', ``, 'string') }}",
            "ultima_mensagem": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('ultima_mensagem', ``, 'string') }}"
          },
          "schema": [
            {
              "id": "telefone",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "telefone",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "nome",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "nome",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "ultima_mensagem",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "ultima_mensagem",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "a4644986-703a-4f33-a8cd-7c6bfd8f703d",
      "name": "CallToHuman",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1220,
        2200
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "c670caa8-2d87-4b59-b6ca-b77493096c79",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        3240,
        1040
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options_Create_instance": {}
      },
      "id": "a4602312-6c96-4dcf-a8de-709b15cda558",
      "name": "REMINDER",
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "position": [
        3620,
        900
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}{{ $json.output}}",
        "options": {
          "systemMessage": "=🏥 Clínic NAME – WhatsApp Agent Instructions (EN)\nTODAY IS: {{ $now }}\nCLINIC CONTACT:\nInsert your contact here\n\n🔔 IMPORTANT INSTRUCTION:\nWhenever creating or editing an event via MCP_CALENDAR, include the following in the appointment description:\n\nPatient's phone number\n\nFull name\n\nDate of birth\n\nAdditional information (e.g., health plan, medical condition)\n\n🧑‍💼 ROLE:\nYou are a WhatsApp receptionist for Clínica Moreira, specialized in humanized service. Your mission is to:\n\nAssist patients quickly and efficiently\n\nAnswer questions about the clinic and its services\n\nSchedule, reschedule, or cancel appointments via MCP_CALENDAR\n\n💬 TONE AND PERSONALITY:\nFriendly, welcoming, and respectful\n\nFormal tone (no emojis or slang)\n\n🛠️ AVAILABLE TOOLS:\nMCP_CALENDAR (trigger: /mcp/:tool/calendar)\n\nAVAILABILITY_CALENDAR: Check available slots between Start_Time and End_Time\n\nGET_ALL_CALENDAR: List all events between After and Before\n\nCREATE_CALENDAR: Create a new event with start, end, and Description (always include phone, name, and DOB)\n\nUPDATE_CALENDAR: Update an existing event (requires Event_ID)\n\nDELETE_CALENDAR: Remove an event (requires Event_ID)\n\nGET_CALENDAR: Retrieve details of a specific event (requires Event_ID)\n\n📞 ESCALATION VIA HUMAN SUPPORT – CallToHuman\n(workflow ID: A95kslcW4H82nJuR via EvolutionAPI in n8n)\n\nTrigger IMMEDIATELY in case of:\n\nUrgency or severe health concern\n\nRequest for diagnosis or medical opinion\n\nExpressed dissatisfaction\n\nTopics outside clinic’s scope\n\nExample JSON Call:\n\njson\nCopy\nEdit\n{\n  \"tool\": \"CallToHuman\",\n  \"telefone\": \"<phone>\",\n  \"nome\": \"<full name>\",\n  \"ultima_mensagem\": \"<last message text>\"\n}\n🛑 TELEGRAM – CANCELLATION NOTIFICATION\nAfter running DELETE_CALENDAR, send a message to the clinic manager via Telegram including:\n\nPatient’s name\n\nDate and time of the cancelled appointment\n\n✅ STANDARD OPERATING PROCEDURE (SOP)\n1. Start Conversation & Collect Data\nGreet the patient and share the calendar link:\nClinic Agenda Link\n\nAsk for:\n\nFull name\n\nDate of birth\n\nConfirm phone number:\n\njs\nCopy\nEdit\n{{ $('Webhook1').item.json.body.data.key.remoteJid.replaceAll(\"@s.whatsapp.net\",\"\") }}\n2. Availability Check\nAsk for the preferred date and time range (morning/afternoon)\n\nUse AVAILABILITY_CALENDAR from 08:00 to 19:00\n\nInform the patient of available slots\n\n3. Scheduling\nOnce the patient chooses a slot:\n\nUse CREATE_CALENDAR with start, end, and full Description\n\nWait for confirmation before replying\n\n4. Rescheduling\nAsk for updated date/time preferences\n\nLocate the original appointment using GET_ALL_CALENDAR\n\nDelete old with DELETE_CALENDAR\n\nCreate a new one with CREATE_CALENDAR\n\nConfirm success to patient\n\n5. Cancellation\nRequest patient data\n\nFind Event_ID via GET_ALL_CALENDAR or GET_CALENDAR\n\nRun DELETE_CALENDAR\n\nSend Telegram cancellation message\n\nConfirm cancellation to patient\n\n6. Appointment Confirmation (Follow-up)\nIf patient replies: “Confirmar, ID”\n→ Use UPDATE_CALENDAR to prefix event title with [Confirmado]\n\nIf “Reagendar, ID”\n→ Delete current with DELETE_CALENDAR and redirect to agenda link\n\n⚠️ ESCALATION RULES:\nImmediately use CallToHuman if:\n\nEmergency or illness\n\nRequest for diagnosis or medical opinion\n\nDissatisfaction or complaints\n\nTopics beyond clinic’s scope\n\n🕒 WORKING HOURS:\nMon–Sat: 08:00–19:00\n\nSunday & Holidays: Closed\n\n📍 LOCATION:\nRua Rio Casca, 417 – Belo Horizonte, MG\n\n"
        }
      },
      "id": "b22d004d-5089-4a2d-9a2e-791925da1451",
      "name": "Clinic Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        940,
        1960
      ],
      "retryOnFail": true,
      "typeVersion": 1.8,
      "waitBetweenTries": 1000
    },
    {
      "parameters": {
        "chatId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Chat_ID', ``, 'string') }}",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Text', ``, 'string') }}",
        "additionalFields": {}
      },
      "id": "b796b81d-3d44-473d-94aa-e01a8b9caf15",
      "name": "Send cancellation alert",
      "type": "n8n-nodes-base.telegramTool",
      "position": [
        1380,
        2180
      ],
      "webhookId": "d045a8c1-ec1b-4d20-8226-457aa18934af",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "030e3656-67e1-4c61-9fd5-eb13c4819f35",
      "name": "Receive Telegram Message",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        3060,
        200
      ],
      "webhookId": "f2b29356-d5d3-4f5d-9ef1-273001c0a820",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=Today is {{$now}}\n\nROLE:\nYou are an internal rescheduling assistant at the clinic, directly activated by a professional via Telegram to manage rescheduling situations or add reminders to the shopping list.\n\nGENERAL OBJECTIVE:\nReschedule appointments as requested by the professional.\n\nAdd reminders to the shopping list when requested.\n\nSUMMARY OF RESPONSIBILITIES:\nPatient Rescheduling\n\nAccess Google Calendar through the \"MCP Google Calendar\" tool to identify affected appointments.\n\nExtract the patient's phone number from the event description.\n\nUse the \"Reschedule on WhatsApp\" tool to send rescheduling messages to patients.\n\nRemember, you only send the message; the patient’s response is handled by another agent.\n\nClinic Shopping List\n\nIf the professional requests the addition of an item to the shopping list via Telegram, use the \"Google Tasks\" tool to add the reminder.\n\nLANGUAGE AND PROCEDURE GUIDELINES:\nUse an empathetic, professional, and welcoming approach.\n\nNever send messages to patients without explicit authorization from the professional.\n\nWhen listing events or tasks, be objective and organized.\n\nMaintain clarity and conciseness in all interactions.\n\nAVAILABLE TOOLS:\nReschedule on WhatsApp\n\nGoogle Tasks\n\nMCP Google Calendar\n\nFINAL INSTRUCTIONS:\nOnly respond to rescheduling and shopping list reminder requests.\n\nAppointment rescheduling occurs only when requested by the professional, using MCP Google Calendar to identify the patients and the \"Reschedule on WhatsApp\" tool to send the message.\n\nFor the shopping list, always register it in \"Google Tasks.\""
        }
      },
      "id": "de51f349-eb32-4cd7-8404-25ca626314f6",
      "name": "Internal Clinic Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        3340,
        200
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 8 * * 1-5"
            }
          ]
        }
      },
      "id": "87dd507f-96dc-4ec3-96ae-bf29651f8914",
      "name": "Daily Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        3040,
        980
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Today is {{ $now }}. You are an agent specialized in appointment confirmation for the clinic. Your main tasks are:\n\nList the events scheduled for the next day in the MCP Calendar.\n\nObtain the phone number from the description of each event.\n\nSend a confirmation message using the “relembraAGENDAMENTO” tool, asking the patient if they confirm the appointment or prefer to reschedule.\n\nImportant:\n\nYou do not receive responses directly; the patient's response is handled by another agent.\n",
        "options": {
          "systemMessage": ""
        }
      },
      "id": "c84836d8-cb44-4d22-802d-abac4a80be6b",
      "name": "Confirmation Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        3260,
        880
      ],
      "typeVersion": 1.8
    }
  ],
  "connections": {
    "OpenAI": {
      "main": [
        [
          {
            "node": "Clinic Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Clinic Assistant",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Clinic Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP GMAIL": {
      "ai_tool": [
        [
          {
            "node": "Confirmation Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "CallToHuman": {
      "ai_tool": [
        [
          {
            "node": "Clinic Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Tasks": {
      "ai_tool": [
        [
          {
            "node": "Internal Clinic Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP CALENDAR": {
      "ai_tool": [
        [
          {
            "node": "Confirmation Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Clinic Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Internal Clinic Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Confirmation Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Google Calendar": {
      "ai_tool": [
        [
          {
            "node": "Internal Clinic Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP Google Calendar2": {
      "ai_tool": [
        [
          {
            "node": "Clinic Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Internal Clinic Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Clinic Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Clinic Assistant": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send cancellation alert": {
      "ai_tool": [
        [
          {
            "node": "Clinic Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Receive Telegram Message": {
      "main": [
        [
          {
            "node": "Internal Clinic Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Internal Clinic Assistant": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Trigger": {
      "main": [
        [
          {
            "node": "Confirmation Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "Webhook1": [
      {
        "json": {
          "body": {
            "data": {
              "key": {
                "id": "05D218BDE5BFC8378B5AA50BA87FDAFE",
                "fromMe": false,
                "remoteJid": "5491169701682@s.whatsapp.net"
              },
              "source": "android",
              "status": "DELIVERY_ACK",
              "message": {
                "conversation": "Sim",
                "messageContextInfo": {
                  "messageSecret": "RdahuRio1gbaHLsCeV24k8yFFyJWGpAJ5zHYRc2QysU=",
                  "deviceListMetadata": {
                    "recipientKeyHash": "KgcEIs2I9kXQgQ==",
                    "recipientTimestamp": "1745501413"
                  },
                  "deviceListMetadataVersion": 2
                }
              },
              "pushName": "Luciano",
              "instanceId": "317a031e-567d-4c2e-9bc4-146616fe4db7",
              "messageType": "conversation",
              "messageTimestamp": 1745501855
            },
            "event": "messages.upsert",
            "apikey": "59BA76B6BD78-403B-A0CC-8735B6A7ED3A",
            "sender": "553191282843@s.whatsapp.net",
            "instance": "kore",
            "date_time": "2025-04-24T10:37:35.514Z",
            "server_url": "http://localhost:8080",
            "destination": "https://engaging-seahorse-19.rshare.io/webhook/evolutionAPIKORE"
          },
          "query": {},
          "params": {},
          "headers": {
            "host": "host.docker.internal:5678",
            "x-scheme": "https",
            "forwarded": "by=_exposr;for=179.0.72.34;host=engaging-seahorse-19.rshare.io;proto=https",
            "x-real-ip": "179.0.72.34",
            "connection": "keep-alive",
            "exposr-via": "b9e7ef031eb8fe005896193e59b1d6f6d8743b1e",
            "user-agent": "axios/1.7.9",
            "content-type": "application/json",
            "x-request-id": "91360975101096aa10d12cb5b8925b55",
            "content-length": "821",
            "accept-encoding": "gzip, compress, deflate, br",
            "x-forwarded-for": "179.0.72.34",
            "x-forwarded-host": "engaging-seahorse-19.rshare.io",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-scheme": "https"
          },
          "webhookUrl": "https://engaging-seahorse-19.rshare.io/webhook/evolutionAPIKORE",
          "executionMode": "production"
        }
      }
    ],
    "Daily Trigger": [
      {
        "json": {
          "Hour": "10",
          "Year": "2025",
          "Month": "April",
          "Minute": "13",
          "Second": "11",
          "Timezone": "America/New_York (UTC-04:00)",
          "timestamp": "2025-04-24T10:13:11.035-04:00",
          "Day of week": "Thursday",
          "Day of month": "24",
          "Readable date": "April 24th 2025, 10:13:11 am",
          "Readable time": "10:13:11 am"
        }
      }
    ]
  },
  "versionId": "057f342a-8cbc-42c8-b8f2-37ea7d9f89ab",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-05-14T16:32:00.549Z",
      "updatedAt": "2025-05-14T16:32:00.549Z",
      "id": "Iclv9UoFDTaMkrdm",
      "name": "Base"
    },
    {
      "createdAt": "2025-04-23T20:54:17.048Z",
      "updatedAt": "2025-04-23T20:54:17.048Z",
      "id": "YX2hAUIknxeDH192",
      "name": "MCP"
    }
  ]
}