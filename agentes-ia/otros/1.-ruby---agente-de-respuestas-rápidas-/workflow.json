{
  "createdAt": "2025-04-29T12:09:27.640Z",
  "updatedAt": "2025-04-29T12:09:52.313Z",
  "id": "mh0M9GGi84Oav9rt",
  "name": "1. Ruby - Agente de Respuestas Rápidas",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "limit": 100,
        "filters": {
          "receivedAfter": "={{ $now.minus(1, 'minutes') }}"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -7860,
        1460
      ],
      "id": "94f120a2-624c-44cb-8277-fe5d123540d3",
      "name": "New Emails",
      "webhookId": "3acca0bb-6018-4184-845e-4dda4a62a8f7"
    },
    {
      "parameters": {
        "jsCode": "// Loop through each incoming item\nfor (let item of items) {\n  const from = item.json.From;\n  if (typeof from === 'string') {\n    // If it’s in the form \"Name <email@domain.com>\", extract the part inside <>\n    const match = from.match(/<([^>]+)>/);\n    // If regex matched, use the captured email; otherwise leave it as-is\n    item.json.From = match ? match[1] : from;\n  }\n}\n\n// Return the modified items back to the workflow\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7660,
        1460
      ],
      "id": "45efc4bd-ab41-40a7-bef4-23cb5f98c7e4",
      "name": "Fix 'From'"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "77968881-2fcf-415a-944d-0968a36a7834",
              "leftValue": "={{ $json.From }}",
              "rightValue": "kiaghasem.dev@gmail.com",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -7440,
        1460
      ],
      "id": "3ec4ffd9-2498-438e-b291-cf228611f1f6",
      "name": "Filter Inbound"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "get",
        "threadId": "={{ $json.threadId }}",
        "simple": false,
        "options": {
          "returnOnlyMessages": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -7080,
        1320
      ],
      "id": "d6975084-b7dd-47b9-97a7-9033fed8d488",
      "name": "Get Full Thread",
      "webhookId": "93550605-a5c2-457c-a2b2-147daecdf899",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Function node – Group e‑mails by thread + add dateTime\n * Output structure:\n * [\n *   {\n *     threadId: '…',\n *     emails: [\n *       { dateTime:'2025‑04‑19T17:56:43+10:00', from:'rep'|'customer', message:'…' },\n *       …\n *     ]\n *   },\n *   …\n * ]\n */\n\nconst REP_ADDRESSES = [\n  'kiaghasem.dev@gmail.com'\n].map(a => a.toLowerCase());\n\n/* ---------- helpers ---------- */\nfunction decodeBody(payload) {\n  if (payload?.body?.data) return b64(payload.body.data);\n\n  if (Array.isArray(payload?.parts)) {\n    const part =\n      payload.parts.find(p => p.mimeType === 'text/plain' && p.body?.data) ??\n      payload.parts.find(p => p.mimeType === 'text/html'  && p.body?.data);\n    if (part) return b64(part.body.data);\n  }\n  return '';\n}\n\nfunction b64(str) {\n  const normalised = str.replace(/-/g, '+').replace(/_/g, '/');\n  return Buffer.from(normalised, 'base64').toString('utf8');\n}\n\nfunction whoIsSender(fromHeader) {\n  const match = fromHeader.match(/<([^>]+)>/);\n  const email = (match ? match[1] : fromHeader).trim().toLowerCase();\n  return REP_ADDRESSES.includes(email) ? 'rep' : 'customer';\n}\n\n/** Convert Gmail internalDate (ms since epoch) ➜ ISO‑8601 in Australia/Sydney */\nfunction formatDateTime(internalDate) {\n  const date = new Date(Number(internalDate));\n  return new Intl.DateTimeFormat('en-AU', {\n    timeZone: 'Australia/Sydney',\n    year:   'numeric',\n    month:  '2-digit',\n    day:    '2-digit',\n    hour:   '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  }).format(date)                         // \"19/04/2025, 17:56:43\"\n    .replace(',', '')                     // remove comma\n    .replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/, '$3-$2-$1') // to YYYY‑MM‑DD\n    .replace(' ', 'T') + '+10:00';        // add ISO T separator + offset\n}\n\n/* ---------- main ---------- */\nconst rawItems = $input.all();\nconst threads = new Map();\nconst orderedThreads = [];\n\nfor (const { json } of rawItems) {\n  const threadId = json.threadId;\n  if (!threads.has(threadId)) {\n    const newThread = { threadId, emails: [] };\n    threads.set(threadId, newThread);\n    orderedThreads.push(newThread);\n  }\n\n  const emailObj = {\n    dateTime: formatDateTime(json.internalDate),\n    from:     whoIsSender(json.From ?? json.from ?? ''),\n    message:  decodeBody(json.payload),\n  };\n\n  threads.get(threadId).emails.push(emailObj);\n}\n\nreturn orderedThreads.map(t => ({ json: t }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6900,
        1320
      ],
      "id": "80b77094-8c84-49af-8c05-582d3b7f19dc",
      "name": "Reformat Thread"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.message.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5840,
        1220
      ],
      "id": "d2b4e576-bbff-48ae-b6a9-6aa3b5f77898",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "OPENAI/GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You work at Kamexa's You're responsible for categorising inbound emails as sales emails or not. \n\nTo do this you must read through the thread of that email (previous emails) and identify whether the email is considered a sales email or not. \n\nSales emails are emails that should be handled by the sales department of Kamexa. They will be from potential customers regarding Kamexa's services. \n\nKamexa runs cold email campaigns, so these emails may be replies to the cold emails sent by the sales team. \n\nYour output must follow this format: \n\n{\n\"decision\": \"Sales OR Not Sales\"\n}\n\nIf the email is not a sales email, then you the value of the decision parameter must be 'Not Sales'.If it is a sales email, then it should be 'Sales'.\n\nDon't output anything else. \n\nDon't wrap the outout in ```json```. \n\nWe just received a new email. \n\nHere's the entire thread of the email in JSON String formatting. \n\n{{ $json.emails.toJsonString() }}\n\nThe newest email is the one just received, which would be closest to right now - {{ $now.toISO() }}\n\n\n(keep in mind each email has the previous email below it)\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -6160,
        1220
      ],
      "id": "eb52eb67-ee00-4f9b-a5a9-c973b262e676",
      "name": "Sales Email? "
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -5640,
        1420
      ],
      "id": "5d0dfedf-3793-4dd7-8539-dfffcb578a74",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e33598c-17cb-497a-88f5-9cd3583211f7",
              "name": "emailAddress",
              "value": "={{ $json.From }}",
              "type": "string"
            },
            {
              "id": "3ee95587-c503-42bf-8625-ce60b28569d7",
              "name": "threadIdToMatch",
              "value": "={{ $json.threadId }}",
              "type": "string"
            },
            {
              "id": "3c21c0cc-06d4-41b0-86c2-fee9032fdc12",
              "name": "messageId",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6980,
        1460
      ],
      "id": "f1e696c4-4e4a-4724-be4b-3bed161a1aa6",
      "name": "Extract Email Address"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "threadId",
              "field2": "threadIdToMatch"
            }
          ]
        },
        "options": {
          "multipleMatches": "all"
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -6500,
        1440
      ],
      "id": "c5fdde29-682f-4c0f-bd18-a4a1228a3c4d",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "kiaghasem.dev@gmail.com",
          "mode": "list",
          "cachedResultName": "kiaghasem.dev@gmail.com"
        },
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', `the day before the date the user requested`, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', `the day after the date the user requested`, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -2460,
        760
      ],
      "id": "c9acb8c7-ca08-4c1e-9826-f370fa7e4801",
      "name": "get_events"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "kiaghasem.dev@gmail.com",
          "mode": "list",
          "cachedResultName": "kiaghasem.dev@gmail.com"
        },
        "start": "={{ $('Edit Fields1').item.json.startTime }}",
        "end": "={{ $('Edit Fields1').item.json.endTime }}",
        "additionalFields": {
          "attendees": [
            "kiaghasem.dev@gmail.com",
            "={{ $('Loop Over Items3').item.json.emailAddress }}"
          ],
          "summary": "={{ $('Edit Fields1').item.json.eventName }} - Kamexa"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        200,
        100
      ],
      "id": "250df58b-1576-4496-a2a3-e7ae134c34bc",
      "name": "Google Calendar"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "reply",
        "threadId": "={{ $('Loop Over Items3').item.json.threadId }}",
        "messageId": "={{ $('Loop Over Items3').item.json.messageId }}",
        "message": "={{ $('Edit Fields1').item.json.emailBody }}",
        "options": {
          "replyToSenderOnly": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        420,
        100
      ],
      "id": "056cdd48-612a-4038-98b3-cf00e5a5befa",
      "name": "Gmail",
      "webhookId": "c7f823d5-c83f-4d7a-8c54-e15c113bdc77"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f83ea007-efce-4f53-adaa-e4f7d7f00d1e",
              "leftValue": "={{ $json.bookCall }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1440,
        980
      ],
      "id": "2a5052d8-88e2-40fa-8ead-4c0eeb64e135",
      "name": "Booking a Call?"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "reply",
        "threadId": "={{ $('Loop Over Items3').item.json.threadId }}",
        "messageId": "={{ $('Loop Over Items3').item.json.messageId }}",
        "message": "={{ $('Edit Fields1').item.json.emailBody }}",
        "options": {
          "replyToSenderOnly": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -280,
        980
      ],
      "id": "9a77fb91-726b-4aeb-a3e9-591da1a2242c",
      "name": "Send Availability",
      "webhookId": "c7f823d5-c83f-4d7a-8c54-e15c113bdc77"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"emailBody\": {\n      \"type\": \"string\",\n      \"description\": \"The body content of the email to be sent\"\n    },\n    \"eventName\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the event. (if just sending availabilities, you can leave this empty)\"\n    },\n    \"startTime\": {\n      \"type\": \"string\",\n      \"description\": \"The start time of the event, in ISO 8601 format.(if just sending availabilities, you can leave this empty)\"\n    },\n    \"endTime\": {\n      \"type\": \"string\",\n      \"description\": \"The end time of the event, in ISO 8601 format. (if just sending availabilities, you can leave this empty)\"\n    },\n    \"bookCall\": {\n      \"type\": \"boolean\",\n      \"description\": \"True if booking a call for a specific time slot.False if sending availabilities\"\n  },\n  \"calendarAvailabilities\": {\n      \"type\": \"string\",\n      \"description\": \"Detailed calendar availabilities for time as specified by manager.\"\n    }\n  },\n  \"required\": [\n    \"emailBody\",\n    \"eventName\",\n    \"startTime\",\n    \"endTime\",\n    \"bookCall\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -2220,
        640
      ],
      "id": "5d5f23c8-1fd8-4052-a515-c9eb3f08cb76",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3b47abb9-ede2-4931-8cd7-e0e4a5bf9dc3",
              "name": "emailBody",
              "value": "={{ $json.output.emailBody }}",
              "type": "string"
            },
            {
              "id": "5196169f-1b2c-4e7e-b5ad-427e777d8ea6",
              "name": "eventName",
              "value": "={{ $json.output.eventName }}",
              "type": "string"
            },
            {
              "id": "d8c5889b-f4e8-40fe-becd-60b35c16f607",
              "name": "startTime",
              "value": "={{ $json.output.startTime }}",
              "type": "string"
            },
            {
              "id": "51e771c2-24d2-4432-bac0-85fe0097096a",
              "name": "endTime",
              "value": "={{ $json.output.endTime }}",
              "type": "string"
            },
            {
              "id": "c6dd2193-21d6-42bc-8935-96c5f2091428",
              "name": "bookCall",
              "value": "={{ $json.output.bookCall }}",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1700,
        980
      ],
      "id": "d3324cd5-9568-4d11-9454-c15cef8aa0ad",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        720,
        960
      ],
      "id": "3013451d-13d8-4fc1-892a-a3f321588d35",
      "name": "OpenAI Chat Model2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Loop Over Items3').item.json.messageId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -2600,
        720
      ],
      "id": "c1bf519c-599e-4fe9-ac2e-48bef3e9ef76",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your team deciced to send calendar availabilities. They sent an action plan to the manager.\n\nYour manager just provided feedback requiring changes. \n\nHere's the draft Email Body: \n\n{{ $('Edit Fields1').item.json.emailBody }}\n\nHere's the managers requested changes: \n\n{{ $('HITL').item.json.data.Feedback }}\n\nCreate a new action plan by filling out the schema defined.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You work in the calendar department of the sales team for Kamexa which is an AI Automation Agency. When a new sales email comes from a prospect, requesting to book a sales call, your team acts immediately. \n\nThe request could either be to book a certain time slot for a call, or it could be a prospect expressing interest, which in that case your team finds all the available time slots and responds to the prospect via email. \n\nYour team creates an action plan and draft and sends this to your manager for approval. \n\nThe manager then provides feedback and may request for changes. \n\nIf the manager needs a change, it is your job to modify the action plan based on your managers feedback. \n\nIn the confirmation email, always mention that the time provided is in Sydney time (UTC+10).\n\nYour output must closely follow the schema defined.\n\nSign off emails as Kia, Kamexa\nHere is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        760,
        1420
      ],
      "id": "4f881e5c-df76-4b11-916f-ac0ca2272f9f",
      "name": "Revision Agent (Email)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8ec98281-5ff1-431a-9769-5fbc6735289f",
              "name": "outcome",
              "value": "=Email sent with availabilities.",
              "type": "string"
            },
            {
              "id": "446009d6-b22b-40e7-8003-48d0bebaa326",
              "name": "emailSent",
              "value": "={{ $('Edit Fields1').item.json.emailBody }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        20,
        980
      ],
      "id": "c7e8fb27-3538-490d-a326-d5c3216888bf",
      "name": "Feedback Message3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A new request just came from the manager: \n\nHere's the email enquiry: \n\n{{ $('Reformat Emails').item.json.output.newProspectEmail }}\n\nHere's a summary of the thread for context: \n\n{{ $('Reformat Emails').item.json.output.previousEmails }}\n\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Overview\nYou work in the sales team at Kamexa which is an AI Automation Agency. You are particularly responsible for handling calendar enquiries via email. \n\nWhen a prospect requests to be booked in for a call, you handle the enquiry by checking availability and creating a draft event and email confirmation.\n\n# Tools: \n- get_events: Use this tool to check calendar availabilities for the date and time specified in the enquiry. \n- think_tool: Use this tool to think about what to do next after you get availabilities.\n\n# Instructions: \nThe emails will either have a just a date or both a time and date for the event. \n- If there is just a date, you must check availability for that day using the get_events tool and create a response email draft to provide the prospect with 2 time slots. \n- If there is both a date and time specified. You must check the availability for that slot in the calendar. If not available you must create a draft response email with 2 alternative time slots that are free. If available, then you must create a draft event and a confirmation email. \n\nYour output must follow the format of the schema required, so that your manager can check it.\n\nIn the confirmation email, always mention that the time provided is in Sydney time (UTC+10).\n\nSign off emails as: \n\nKia, Kamexa\n\nHere is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -2600,
        440
      ],
      "id": "eeaeec04-9b57-4f88-9bba-0c8b69afd4e8",
      "name": "Calendar Agent"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"emailBody\": {\n      \"type\": \"string\",\n      \"description\": \"The body content of the email to be sent\"\n    },\n    \"eventName\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the event. (if just sending availabilities, you can leave this empty)\"\n    },\n    \"startTime\": {\n      \"type\": \"string\",\n      \"description\": \"The start time of the event, in ISO 8601 format.(if just sending availabilities, you can leave this empty)\"\n    },\n    \"endTime\": {\n      \"type\": \"string\",\n      \"description\": \"The end time of the event, in ISO 8601 format. (if just sending availabilities, you can leave this empty)\"\n    },\n    \"bookCall\": {\n      \"type\": \"boolean\",\n      \"description\": \"True if booking a call for a specific time slot. False if sending availabilities\"\n  },\n  \"calendarAvailabilities\": {\n      \"type\": \"string\",\n      \"description\": \"Detailed calendar availabilities for time as specified by manager.\"\n    }\n  },\n  \"required\": [\n    \"emailBody\",\n    \"eventName\",\n    \"startTime\",\n    \"endTime\",\n    \"bookCall\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        880,
        940
      ],
      "id": "0ac4938c-5b1a-4391-9618-ea944dd71b1f",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your team deciced to actually book in a call and send the confirmation email. They sent an action plan to the manager.\n\nYour manager just provided feedback requiring changes. \n\nHere's the proposed event details: \n\nName: {{ $('Edit Fields1').item.json.eventName }}\nStart Time: {{ $('Edit Fields1').item.json.startTime }}\nEnd Time: {{ $('Edit Fields1').item.json.endTime }}\n\nHere's the confirmation Email Body: \n\n{{ $('Edit Fields1').item.json.emailBody }}\n\nHere's the managers requested changes: \n\n{{ $('HITL3').item.json.data.Feedback }}\n\nCreate a new action plan by filling out the schema defined.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You work in the calendar department of the sales team for Kamexa which is an AI Automation Agency. When a new sales email comes from a prospect, requesting to book a sales call, your team acts immediately. \n\nThe request could either be to book a certain time slot for a call, or it could be a prospect expressing interest, which in that case your team finds all the available time slots and responds to the prospect via email. \n\nYour team creates an action plan and draft and sends this to your manager for approval. \n\nThe manager then provides feedback and may request for changes. \n\nIf the manager needs a change, it is your job to modify the action plan based on your managers feedback. \n\nIn the confirmation email, always mention that the time provided is in Sydney time (UTC+10).\n\nYour output must closely follow the schema defined.\n\nSign off emails as Kia, Kamexa\nHere is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        700,
        520
      ],
      "id": "84386ab7-5959-4203-9d69-4849016db3b6",
      "name": "Revision Agent (Email)1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8ec98281-5ff1-431a-9769-5fbc6735289f",
              "name": "outcome",
              "value": "=Call booked for {{ $('Edit Fields1').item.json.startTime }}.",
              "type": "string"
            },
            {
              "id": "446009d6-b22b-40e7-8003-48d0bebaa326",
              "name": "emailSent",
              "value": "=Confirmation email sent: {{ $('Edit Fields1').item.json.emailBody }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        100
      ],
      "id": "9c8703f2-137c-4110-bd26-a3e8cb28ab47",
      "name": "Feedback Message4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2740,
        660
      ],
      "id": "3f6bac5b-e758-475b-9762-056dfa9a2643",
      "name": "OpenAI Chat Model1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A new email was just received by a prospect: \n\nHere's the email: \n\n{{ $('Reformat Emails').item.json.output.newProspectEmail }}\n\nHere's a summary of the thread of the email (for context): \n\n{{ $('Reformat Emails').item.json.output.previousEmails }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You work in the sales team at Kamexa which is an AI Automation Agency. When Kamexa receives an email from a sales prospect, you must respond back to their enquiry. \n\nThe received email can either be a response to Kamexa's cold email, or it can be the prospect emailing us for the first time. \n\nEither way your job is to ensure you address their enquiry with the intent of booking them in for a consultation. \n\n# Tools: \n- kamexa_information: This is a RAG database containing all the FAQs regarding Kamexa. You must use this database to find the information necessary to answer the prospects enquiry. \n\n\n# Instructions: \nYou will receive the new email along with the email history as an input. You must use the kamexa_information database to find information necessary for responding to the prospects email. \n\nThen you must provide an output to your manager by following the schema defined. \n\nIf you don't have enough information or are not certain how to handle a scenario, you must output \"escalate\" as true so your manager can handle it.\n\nSign off emails as Kia, Kamexa\n\nHere is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -2340,
        3100
      ],
      "id": "85a679c7-975a-468e-935b-64013f3a9bd5",
      "name": "Email Agent"
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        -2340,
        3740
      ],
      "id": "1e39d353-d898-44f1-9ccf-ee812e6071dc",
      "name": "Supabase Vector Store"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2360,
        3960
      ],
      "id": "a435cf78-42b1-4e8a-a370-186009410fd7",
      "name": "Embeddings OpenAI1"
    },
    {
      "parameters": {
        "name": "kamexa_information",
        "description": "Information about Kamexa that you can use to answer sales queries. ",
        "topK": 5
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        -2180,
        3500
      ],
      "id": "31d40208-b47f-461f-be3a-241bebb9d961",
      "name": "kamexa_information"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Manager just gave feedback requesting a change. \n\nHere's the draft Email your team had prepared: \n\n{{ $('Edit Fields2').item.json.emailBody }}\n\nHere's the managers requested changes: \n\n{{ $('HITL2').item.json.data.Feedback }}\n\nHere's Kamexa specific information which you can use as context for writing the email: \n\n{{ $('Email Agent').item.json.output.kamexaInformation }}\n\nRewrite the draft email in line with the managers request. ",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You work in the sales team at Kamexa which is an AI Automation Agency. When Kamexa receives an email from a sales prospect, your team responds back to their enquiry. \n\nThe prospect email can either be a response to a cold email, or it can be the prospect emailing us for the first time. \n\nEither way your team addresses their enquiry with the intent of booking them in for a consultation. \n\nThe draft response is then sent to your manager for feedback.\n\nIf the manager needs a change, it is your job to modify the email based on your managers feedback. \n\nYour output must closely follow the schema defined.\n\nDon't make anything up. \n\nSign off emails as Kia, Kamexa\nHere is the current date/time in Sydney (UTC+10): {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        260,
        3340
      ],
      "id": "171be38f-c30d-4433-a7d8-6e6dd1c952f5",
      "name": "Revision Agent (Email)2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8ec98281-5ff1-431a-9769-5fbc6735289f",
              "name": "outcome",
              "value": "=Email reply sent.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        2780
      ],
      "id": "1b3f3a1d-ac76-46fc-9f4c-dbdfb728c9c1",
      "name": "Completed Message"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8ec98281-5ff1-431a-9769-5fbc6735289f",
              "name": "outcome",
              "value": "=Escalated to human agent!",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -220,
        2120
      ],
      "id": "4ef0f887-3dec-4379-9369-4be0ec13d6bb",
      "name": "Completed Message1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2460,
        3300
      ],
      "id": "70e2c567-49d6-4cde-8870-724ca3e8618a",
      "name": "OpenAI Chat Model3"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"emailBody\": {\n      \"type\": \"string\",\n      \"description\": \"The body content of the email reply to be sent to the prospect. (if escalate is true then this is unecessary)\"\n    },\n      \"reason\": {\n      \"type\": \"string\",\n      \"description\": \"Reasoning for your response.\"\n    },\n    \"escalate\": {\n      \"type\": \"boolean\",\n      \"description\": \"True if you are unsure and need to escalate to your manager. False if you have enough information and are sure of your answer.\"\n  },\n    \"kamexaInformation\": {\n      \"type\": \"string\",\n      \"description\": \"Summary of information you found from querying the kamexa_informatin database.\"\n  }\n  },\n  \"required\": [\n    \"emailBody\",\n    \"reason\",\n    \"escalate\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1760,
        3620
      ],
      "id": "1b5a7a99-f21e-4927-9134-827bf833d129",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1960,
        3700
      ],
      "id": "526e7add-bf85-465c-822d-201f3dbbac51",
      "name": "OpenAI Chat Model4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "74a43c89-3cf6-4814-ab9a-f000fb2eb7d2",
              "name": "emailBody",
              "value": "={{ $json.output.emailBody }}",
              "type": "string"
            },
            {
              "id": "96d65148-22fc-4acb-b2e7-7a0b892929bc",
              "name": "reasoning",
              "value": "={{ $json.output.reason }}",
              "type": "string"
            },
            {
              "id": "393e3445-3983-4f20-ad64-5de5033a8c60",
              "name": "escalate",
              "value": "={{ $json.output.escalate }}",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1340,
        3260
      ],
      "id": "f267d572-b02a-4517-b0a3-5ab8ff33af1a",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        140,
        3620
      ],
      "id": "b42a83a7-4709-4be8-98c0-dcd0f9a326d2",
      "name": "OpenAI Chat Model5"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"emailBody\": {\n      \"type\": \"string\",\n      \"description\": \"The body content of the email reply to be sent to the prospect in line with managers feedback.\"\n    },\n      \"reason\": {\n      \"type\": \"string\",\n      \"description\": \"Reasoning for your response.\"\n    }\n  },\n  \"required\": [\n    \"emailBody\",\n    \"reason\",\n    \"escalate\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        560,
        3620
      ],
      "id": "1f5f763c-f5b5-41e7-95d1-23fef2d2e166",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "chatId": "7466921638",
        "text": "=### Human Action Needed! \n\n### Sales Enquiry from  {{ $('Loop Over Items3').item.json.emailAddress }}\n\n### Previous Emails Context:\n-------------------\n\n{{ $('Reformat Emails').item.json.output.previousEmails }}\n\n\n### New Email: \n-------------------\n\n{{ $('Reformat Emails').item.json.output.newProspectEmail }}\n\n\nCan't handle this - Here's why: \n-------------------\n\n{{ $('Email Agent').item.json.output.reason }}\n\nPlease respond to them as soon as you can! ",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -520,
        2120
      ],
      "id": "6492b3f8-eb45-4bc2-b6e8-0c88f621edbb",
      "name": "Telegram3",
      "webhookId": "62f5b785-8bc0-4756-8e41-36aac583d725"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -4680,
        1800
      ],
      "id": "a50ae248-cdd7-42f9-ac35-540cc75479eb",
      "name": "OpenAI Chat Model7"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"newProspectEmail\": {\n      \"type\": \"string\",\n      \"description\": \"The body content of the new email received by the prospect which we need to answer.\"\n    },\n      \"previousEmails\": {\n      \"type\": \"string\",\n      \"description\": \"Summary of previous emails in the same thread in dotpoint format.\"\n    }\n  },\n  \"required\": [\n    \"newProspectEmail\",\n    \"previousEmails\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -4380,
        1800
      ],
      "id": "380c15e9-fc8e-49f1-ac9e-ad339aaa9065",
      "name": "Structured Output Parser5"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"calendar\": {\n      \"type\": \"boolean\",\n      \"description\": \"True if Calendar Email and False if Information Email\"\n    }\n  },\n  \"required\": [\n    \"newProspectEmail\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -4120,
        1780
      ],
      "id": "a4144da6-b8a5-459e-9e9f-c71d4ccc56c8",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.calendar }}",
                    "rightValue": "Calendar",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "925bd4a7-f8a4-4b93-8fb9-47f6a238c89d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Calendar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a2580899-2579-496c-9f96-ea14fb997c4f",
                    "leftValue": "={{ $json.output.calendar }}",
                    "rightValue": "Email",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Email"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3920,
        1520
      ],
      "id": "68473f4b-86c5-4367-801a-69a426ef8621",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You're an inbox manager. A new email was received in your inbox. \n\nThe emails are given to you in JSON String formatting. \n\nYour job is to reformat this for your manager. \n\nYou must: \n\n1. Identify the newest email which was just recived and extract this email. This email will be dated today {{ $now }} and will be the last email in the thread. The email generally has the previous email at the end of it so you must decide when it is referencing a previous email and remove that so the final output is just the new email body. Put this in the newPorspectEmail parameter of your output.  \n\n2. Summarise the previous emails in the thread in dotpoint format so your manager can quickly read over it for context. Put this in the previousEmails parameter. \n\nSometimes the email thread will not contain any previous emails. In this case then just leave the previousEmails parameter empty.\n\nHere's the email thread in JSON String: \n\n{{ $json.emails.toJsonString() }}\n\nKeep in mind the thread goes from oldest email at top to newest email at the bottom. ",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -4820,
        1520
      ],
      "id": "b190aa60-6ee4-4853-80dd-b1f54b6b3226",
      "name": "Reformat Emails"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=New email just came in. \n\nHere's the email: \n\n{{ $json.output.newProspectEmail }} \n\nHere's a summary of the thread the email is on: \n\n{{ $json.output.previousEmails }}\n\nClassify it.\n",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You're a sales inbox manager. \n\nThe emails that come in from clients are either to book a call or to get more info. \n\nYour job is to classify each email as a calendar or information email. \n\nCalendar emails are those where the prospect suggests being booked in for a call. \n\nInformation emails are those which require a reply from the sales team to progress further. This could be the prospect asking for information or making an enquiry. "
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -4460,
        1520
      ],
      "id": "19bf7c01-e0ed-4a34-863c-f5a391d38038",
      "name": "Calendar or Email"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -5380,
        1420
      ],
      "id": "fa99802f-6808-49ad-8215-e56e2b4cb64e",
      "name": "Loop Over Items3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -4820,
        1200
      ],
      "id": "67d6255d-f3de-4829-8b87-c6aa332b0d3a",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8a3b632f-a823-434f-85bb-30fb268370dd",
              "leftValue": "={{ $json.decision }}",
              "rightValue": "Sales",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5200,
        1500
      ],
      "id": "97dad8f1-b1f0-4fc7-8074-1264628c51ad",
      "name": "Sales Email?"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "Yes",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0a83b8bf-1fbe-4646-a7bd-8d5efd817629"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approved"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "327f1432-f2fd-4c09-bcf9-b03effea941f",
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "No",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Iterate"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "749ca2c5-30f9-4acd-b9a2-5a10fc4d2b3e",
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "Stop - Human Handling",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Human"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -880,
        3260
      ],
      "id": "32abf2a6-3397-4aa3-b701-cb7ae22b28d6",
      "name": "Decision"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "7466921638",
        "message": "=### Prospect = {{ $('Loop Over Items3').item.json.emailAddress }}\n\n### Action = Replying to Email\n-------------------\n\n### Previous Emails:\n-------------------\n\n{{ $('Reformat Emails').item.json.output.previousEmails }} \n\n### Customer Email: \n-------------------\n\n{{ $('Reformat Emails').item.json.output.newProspectEmail }} \n\n### Draft Email: \n------------------- \n\n{{ $json.emailBody }} \n\n### Reasoning: \n------------------- \n\n{{ $json.reasoning }}\n",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Approve",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  },
                  {
                    "option": "No"
                  },
                  {
                    "option": "Stop - Human Handling"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Feedback"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1140,
        3260
      ],
      "id": "24e9260d-c5eb-4561-91b2-bf78e5123bb1",
      "name": "HITL2",
      "webhookId": "62f5b785-8bc0-4756-8e41-36aac583d725"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Loop Over Items3').item.json.messageId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -2300,
        3320
      ],
      "id": "b3588333-8010-46fd-8c49-66cd71980d82",
      "name": "Simple Memory2"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -2340,
        700
      ],
      "id": "36998f5f-e41b-4f3c-98eb-6bccfff03de4",
      "name": "think_tool"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "7466921638",
        "message": "=### Prospect = {{ $('Loop Over Items3').item.json.emailAddress }}\n\n### Action = Sending Availabilties \n-------------------\n\n### Previous Emails:\n-------------------\n\n{{ $('Reformat Emails').item.json.output.previousEmails }} \n\n### Customer Email: \n-------------------\n\n{{ $('Reformat Emails').item.json.output.newProspectEmail }} \n\n### Availabilities: \n------------------- \n\n{{ $('Calendar Agent').item.json.output.calendarAvailabilities }}\n\n### Draft Email: \n------------------- \n\n{{ $('Edit Fields1').item.json.emailBody }} \n\n",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Approve",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  },
                  {
                    "option": "No"
                  },
                  {
                    "option": "Stop - Human Handling"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Feedback"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1140,
        1180
      ],
      "id": "b7cba396-596a-480c-becb-be1874067c78",
      "name": "HITL",
      "webhookId": "62f5b785-8bc0-4756-8e41-36aac583d725"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "Yes",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0a83b8bf-1fbe-4646-a7bd-8d5efd817629"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approved"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "327f1432-f2fd-4c09-bcf9-b03effea941f",
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "No",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Iterate"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "749ca2c5-30f9-4acd-b9a2-5a10fc4d2b3e",
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "Stop - Human Handling",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Human"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -880,
        1180
      ],
      "id": "49d9f9ee-07da-4db7-a414-7d1139c70994",
      "name": "Decision1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "Yes",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0a83b8bf-1fbe-4646-a7bd-8d5efd817629"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Approved"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "327f1432-f2fd-4c09-bcf9-b03effea941f",
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "No",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Iterate"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "749ca2c5-30f9-4acd-b9a2-5a10fc4d2b3e",
                    "leftValue": "={{ $json.data.Approve }}",
                    "rightValue": "Stop - Human Handling",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Human"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -880,
        740
      ],
      "id": "c7ae4e4b-e697-4e13-b39e-f56e34f4ca96",
      "name": "Decision2"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "7466921638",
        "message": "=### Prospect = {{ $('Loop Over Items3').item.json.emailAddress }}\n\n### Action = Booking Call + Email Confirmation  \n-------------------\n\n### Previous Emails:\n-------------------\n\n{{ $('Reformat Emails').item.json.output.previousEmails }} \n\n### Customer Email: \n-------------------\n\n{{ $('Reformat Emails').item.json.output.newProspectEmail }} \n\n### Availabilities: \n------------------- \n\n{{ $('Calendar Agent').item.json.output.calendarAvailabilities }}\n\n### Event Details: \n------------------- \n\n{{ $('Edit Fields1').item.json.eventName }}\nFrom: {{ $('Edit Fields1').item.json.startTime }}\nTo: {{ $('Edit Fields1').item.json.endTime }}\n\n### Draft Email: \n------------------- \n\n{{ $('Edit Fields1').item.json.emailBody }} \n",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Approve",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  },
                  {
                    "option": "No"
                  },
                  {
                    "option": "Stop - Human Handling"
                  }
                ]
              }
            },
            {
              "fieldLabel": "Feedback"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1140,
        740
      ],
      "id": "7de20d91-6891-4ac1-a37a-9becda2448fc",
      "name": "HITL3",
      "webhookId": "62f5b785-8bc0-4756-8e41-36aac583d725"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8c816866-eec9-4c02-a7df-e37a4c1fc89f",
              "leftValue": "={{ $json.output.escalate }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1800,
        3120
      ],
      "id": "44d78431-cb81-4b69-bced-29d6160e84d0",
      "name": "Escalate?"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -8080,
        1460
      ],
      "id": "880fbd25-c5a5-4780-b69d-e7c4a2cf8033",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "reply",
        "threadId": "={{ $('Loop Over Items3').item.json.threadId }}",
        "messageId": "={{ $('Loop Over Items3').item.json.messageId }}",
        "message": "={{ $('Edit Fields2').item.json.emailBody }}",
        "options": {
          "replyToSenderOnly": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        200,
        2780
      ],
      "id": "436ffc08-693a-47c9-ab06-2b19102a7c87",
      "name": "Respond to Enquiry",
      "webhookId": "c7f823d5-c83f-4d7a-8c54-e15c113bdc77"
    },
    {
      "parameters": {
        "content": "# Get New Emails",
        "height": 740,
        "width": 2000,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -8280,
        1140
      ],
      "typeVersion": 1,
      "id": "34aa40eb-0dd8-47aa-9b88-b9e2018f82f2",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Sales or Not?",
        "height": 740,
        "width": 1240,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -6240,
        1140
      ],
      "typeVersion": 1,
      "id": "8a20d8d4-b39b-4ceb-985b-f73e8142a62f",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Clean History",
        "height": 940,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4980,
        1020
      ],
      "typeVersion": 1,
      "id": "af8c65c8-5f66-46f8-9049-09cefc91c99a",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# Calendar or Email agent?",
        "height": 940,
        "width": 780,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4480,
        1020
      ],
      "typeVersion": 1,
      "id": "adec27c4-f764-4548-9ed5-005fb1f6d355",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "# Availability + Draft Event/Confirmation Email ",
        "height": 560,
        "width": 900,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2960,
        340
      ],
      "typeVersion": 1,
      "id": "69bd59fa-a227-4e42-99c6-55be9831d470",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Human Feedback ",
        "height": 980,
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1240,
        540
      ],
      "typeVersion": 1,
      "id": "e72b646a-1516-49e3-8585-71a63c3039af",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "# Book Event + Confirmation Email ",
        "height": 380,
        "width": 900,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "af7628a2-6775-4fe4-8065-7a578dd43c6b",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "# Send Availability  ",
        "height": 320,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -360,
        860
      ],
      "typeVersion": 1,
      "id": "d42d48e5-909e-4639-b16c-4543cb295d77",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "# Revision  ",
        "height": 1240,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        420
      ],
      "typeVersion": 1,
      "id": "1869f1b5-fb67-4d66-a81f-949f1c8cbca2",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "# Escalate to Human  ",
        "height": 360,
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -620,
        2020
      ],
      "typeVersion": 1,
      "id": "58561a10-8e5f-429f-aad4-4329d0ac36bb",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "# Check Google Drive + Response Email Draft ",
        "height": 1280,
        "width": 920,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2540,
        2840
      ],
      "typeVersion": 1,
      "id": "dcc7ceeb-b437-4109-ab08-84c417de48a1",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "# Human Feedback",
        "height": 460,
        "width": 820,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1460,
        3140
      ],
      "typeVersion": 1,
      "id": "a741ff63-d74c-4679-af3f-b0051d094aa5",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "content": "# Respond to Enquiry",
        "height": 460,
        "width": 640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        60,
        2640
      ],
      "typeVersion": 1,
      "id": "5bdf6f4c-474d-4eeb-ba42-5af4678484b2",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "content": "# Revision ",
        "height": 580,
        "width": 640,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        80,
        3220
      ],
      "typeVersion": 1,
      "id": "faf468fd-5487-458e-9f33-fd8999aefc88",
      "name": "Sticky Note14"
    }
  ],
  "connections": {
    "New Emails": {
      "main": [
        [
          {
            "node": "Fix 'From'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix 'From'": {
      "main": [
        [
          {
            "node": "Filter Inbound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Full Thread": {
      "main": [
        [
          {
            "node": "Reformat Thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Inbound": {
      "main": [
        [
          {
            "node": "Get Full Thread",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract Email Address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reformat Thread": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sales Email? ": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Email Address": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Sales Email? ",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "get_events": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "Feedback Message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Booking a Call?": {
      "main": [
        [
          {
            "node": "HITL3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HITL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Availability": {
      "main": [
        [
          {
            "node": "Feedback Message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Booking a Call?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Revision Agent (Email)",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Revision Agent (Email)1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Revision Agent (Email)": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Agent": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Revision Agent (Email)",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Revision Agent (Email)1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Revision Agent (Email)1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent": {
      "main": [
        [
          {
            "node": "Escalate?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "kamexa_information",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "kamexa_information": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Revision Agent (Email)2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Email Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Email Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "kamexa_information",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "HITL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Revision Agent (Email)2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Revision Agent (Email)2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Telegram3": {
      "main": [
        [
          {
            "node": "Completed Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Reformat Emails",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Calendar or Email",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Reformat Emails",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Calendar or Email",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Calendar Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Email Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reformat Emails": {
      "main": [
        [
          {
            "node": "Calendar or Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar or Email": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback Message4": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback Message3": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Completed Message1": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Completed Message": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sales Email?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sales Email?": {
      "main": [
        [
          {
            "node": "Reformat Emails",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decision": {
      "main": [
        [
          {
            "node": "Respond to Enquiry",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Revision Agent (Email)2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HITL2": {
      "main": [
        [
          {
            "node": "Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Email Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "think_tool": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "HITL": {
      "main": [
        [
          {
            "node": "Decision1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decision1": {
      "main": [
        [
          {
            "node": "Send Availability",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Revision Agent (Email)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decision2": {
      "main": [
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Revision Agent (Email)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HITL3": {
      "main": [
        [
          {
            "node": "Decision2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escalate?": {
      "main": [
        [
          {
            "node": "Telegram3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "New Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Enquiry": {
      "main": [
        [
          {
            "node": "Completed Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "a0870f01-da76-4939-959e-1227a1c6f15f",
  "triggerCount": 0,
  "tags": []
}