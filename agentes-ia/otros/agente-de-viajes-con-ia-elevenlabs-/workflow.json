{
  "createdAt": "2025-04-29T20:41:34.821Z",
  "updatedAt": "2025-05-14T16:27:35.132Z",
  "id": "L4cl88IRfsAyGC0s",
  "name": "Agente de viajes con IA Elevenlabs",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "47fe74e9-ed6d-4a0e-989d-40717bcfe291",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "d693d004-c8ad-4c12-aba2-b551aed108b7",
      "name": "Webhook",
      "webhookId": "47fe74e9-ed6d-4a0e-989d-40717bcfe291"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fb5ea51e-bcad-42c3-8504-9ff4a6579e79",
              "name": "Current location",
              "value": "={{ $json.body.departure }}",
              "type": "string"
            },
            {
              "id": "f93cce9f-ba77-4a9e-bc64-ad4e08fae73b",
              "name": "Name",
              "value": "={{ $json.body.name }}",
              "type": "string"
            },
            {
              "id": "6c4d96f1-81d3-4026-bc57-f043f8c7d5f4",
              "name": "Destination",
              "value": "={{ $json.body.destination }}",
              "type": "string"
            },
            {
              "id": "c49fb4ef-e205-4e95-9dc3-fbfc59b7750b",
              "name": "email",
              "value": "={{ $json.body.email }}",
              "type": "string"
            },
            {
              "id": "688445df-5ac7-4f6f-a7ab-f4104eebc9ed",
              "name": "other",
              "value": "={{ $json.body.other }}",
              "type": "string"
            },
            {
              "id": "e3fa9426-1824-44ef-92a7-273e9af99372",
              "name": "departuredate",
              "value": "={{ $json.body.departuredate }}",
              "type": "string"
            },
            {
              "id": "5e50945a-8db6-4a0f-a5ff-529a121bebdc",
              "name": "return date",
              "value": "={{ $json.body.returndate }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        200,
        0
      ],
      "id": "bd86823b-184b-4719-9501-f7d24e23f124",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        320,
        200
      ],
      "id": "3c628b0c-357b-4642-9ad1-febed762326f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"origin\": \"\",\n  \"destination\": \"\",\n  \"departure\": \"\",\n  \"return\": \"\", \n  \"email\":\"\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        460,
        200
      ],
      "id": "09806cd7-612b-4f71-a229-41c645e688fa",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Flights codes & formatted dates').item.json.output.email }}",
        "subject": "={{ $('OpenAI').item.json.message.content }}",
        "message": "={{ $json.emailBody }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2320,
        0
      ],
      "id": "ffd0bc23-5f0c-41de-b78a-145cb4a694c9",
      "name": "Gmail",
      "webhookId": "6b5d5205-92ff-494d-89b8-8f210c106d7b",
      "credentials": {
        "gmailOAuth2": {
          "id": "BwWjplhZQVpEPVPV",
          "name": "Gmail daniel@averis.es"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1040,
        200
      ],
      "id": "73eb24e7-1481-434c-9e26-7b1cddbc0213",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1400,
        180
      ],
      "id": "81afcf9b-7840-47bd-b59e-e18ac47dc398",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate additional details that the traveller will need. \n\nDestination: \"{{ $('Webhook').item.json.body.destination }}\"\n\nDeparture location: \"{{ $('Webhook').item.json.body.departure }}\"\n\nPassport type: CHANGE\n\nDeparture date: \"{{ $('Flights codes & formatted dates').item.json.output.departure }}\"\n\nReturn date: \"{{ $('Flights codes & formatted dates').item.json.output.return }}\"\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1040,
        0
      ],
      "id": "3b789efd-2ae6-4b1a-8dc3-a9b208784ba3",
      "name": "AI Agent Travel Recommendation"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Overview\nYou are an expert email writer specializing in creating travel plans. Your job is to output an HTML email with a professional travel agency branding.\n\n## Objective\nYou will receive information about a vacation plan. Create a professionally designed email with travel agency branding, including flights and hotels information.\n\n## Output Format\nYou must output a JSON object with a single \"output\" field containing the HTML email. The format should be exactly:\n\n```json\n{\n  \"output\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n...[COMPLETE HTML EMAIL HERE]</html>\"\n}\n```\n\nIMPORTANT: Do not add any prefixes like \"json{\" before your output. Your response should be a valid JSON object. Do not use triple backticks or code formatting in your output.\n\n## Available Variables\nUse these variables in your HTML:\n- Departure location: `{{ $('Webhook').item.json.body.departure }}`\n- Destination: `{{ $node['Webhook'].json.body.destination }}`\n- Departure date: `{{ $('Flights codes & formatted dates').item.json.output.departure }}`\n- Return date: `{{ $('Flights codes & formatted dates').item.json.output.return }}`\n- Airline: `{{ $node['Flights'].json.best_flights[1].flights[0].airline }}`\n- Departure time: `{{ $node['Flights'].json.best_flights[1].flights[0].departure_airport.time }}`\n- Flight duration: `{{ $node['Flights'].json.best_flights[1].flights[0].duration }} minutes`\n- Flight features: `{{ $node['Flights'].json.best_flights[1].flights[0].extensions }}`\n- Flight price: `${{ $node['Flights'].json.best_flights[1].price }}`\n- Flight type: `{{ $node['Flights'].json.best_flights[1].type }}`\n- Hotel name: `{{ $('Hotels').item.json.brands[0].name }}`\n- Hotel link: Use \"https://www.accor.com/\" for Accor hotels or another appropriate hotel website\n- Hotel image: `{{ $('Hotels').item.json.properties[0].images[0].original_image }}`\n- Hotel rate per night: `{{ $('Hotels').item.json.properties[0].prices[0].rate_per_night.lowest }}`\n- Hotel total rate: `{{ $('Hotels').item.json.properties[0].total_rate.lowest }}`\n\n## Date Formatting\nAlways format dates in a user-friendly way:\n- Convert YYYY-MM-DD format to \"Day of week, Month Day(th/st/nd/rd), Year\"\n- Example: \"2025-04-20\" should become \"Sunday, April 20th, 2025\"\n- Include the day of week to help travelers plan better\n\n## Email Design Requirements\n- Use professional travel agency branding with the name \"WorldVoyager Travel\"\n- Include a blue-to-dark-blue gradient header with gold accent in the logo\n- Make all sections clearly separated with headings and horizontal rules\n- Ensure the design is responsive and mobile-friendly\n- Use a clean, modern design with blue/gold color scheme\n- Ensure all button text is white (using !important in CSS if needed)\n\n## HTML Template Structure\nYour HTML should follow this structure with proper styling:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Upcoming Trip to {{ $node['Webhook'].json.body.destination }}!</title>\n    <style>\n        body {\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 650px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .header {\n            background: linear-gradient(135deg, #0396FF 0%, #0D43A0 100%);\n            color: white;\n            padding: 25px;\n            border-radius: 8px 8px 0 0;\n            text-align: center;\n        }\n        .logo {\n            font-size: 24px;\n            font-weight: bold;\n            margin-bottom: 10px;\n        }\n        .logo span {\n            color: #FFD700;\n        }\n        .content {\n            background: #fff;\n            padding: 25px;\n            border-radius: 0 0 8px 8px;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n        }\n        h1 {\n            color: #0D43A0;\n            margin-top: 0;\n        }\n        h2 {\n            color: #0396FF;\n            border-bottom: 2px solid #eee;\n            padding-bottom: 10px;\n            margin-top: 30px;\n        }\n        .section {\n            margin-bottom: 30px;\n        }\n        hr {\n            border: none;\n            border-top: 1px solid #eee;\n            margin: 30px 0;\n        }\n        .hotel-image {\n            max-width: 100%;\n            height: auto;\n            border-radius: 6px;\n            margin: 15px 0;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .hotel-info {\n            background: #f9f9f9;\n            padding: 15px;\n            border-radius: 6px;\n            margin-top: 10px;\n        }\n        .flight-details {\n            background: #f0f7ff;\n            padding: 15px;\n            border-radius: 6px;\n            margin-top: 15px;\n        }\n        .features-list {\n            list-style-type: none;\n            padding-left: 0;\n        }\n        .features-list li {\n            padding: 5px 0;\n            border-bottom: 1px dotted #eee;\n        }\n        .features-list li:last-child {\n            border-bottom: none;\n        }\n        .cta-button {\n            display: inline-block;\n            background: #0396FF;\n            color: white !important;\n            padding: 12px 25px;\n            text-decoration: none;\n            border-radius: 4px;\n            font-weight: bold;\n            margin-top: 20px;\n        }\n        .cta-button:hover {\n            background: #0277c8;\n            text-decoration: none !important;\n        }\n        .footer {\n            text-align: center;\n            margin-top: 30px;\n            color: #888;\n            font-size: 14px;\n        }\n        a {\n            color: #0396FF;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <div class=\"logo\">World<span>Voyager</span> Travel</div>\n        <div>Your Premium Travel Partner</div>\n    </div>\n    \n    <div class=\"content\">\n        <!-- Main heading -->\n        <h1>Your Upcoming Trip to {{ $node['Webhook'].json.body.destination }}!</h1>\n        \n        <!-- Introduction section -->\n        <div class=\"section\">\n            <p>Dear Traveler,</p>\n            <p>Get ready for an unforgettable journey to the paradise destination of {{ $node['Webhook'].json.body.destination }}! We've finalized all the details for your upcoming adventure, and everything is set for your departure.</p>\n            <p>From stunning sights to unique experiences, {{ $node['Webhook'].json.body.destination }} offers a perfect blend of relaxation and adventure. We've carefully selected accommodations and travel arrangements to ensure your experience is nothing short of exceptional.</p>\n        </div>\n        <hr>\n        \n        <!-- Flights section -->\n        <div class=\"section\">\n            <h2>Flight Information</h2>\n            <p><strong>Departure:</strong> {{ $('Webhook').item.json.body.departure }}<br>\n               <strong>Destination:</strong> {{ $node['Webhook'].json.body.destination }}<br>\n               <strong>Travel Dates:</strong> {{ $('Flights codes & formatted dates').item.json.output.departure }} - {{ $('Flights codes & formatted dates').item.json.output.return }}</p>\n            \n            <div class=\"flight-details\">\n                <h3>{{ $node['Flights'].json.best_flights[1].flights[0].airline }}</h3>\n                <p><strong>Departure Time:</strong> {{ $node['Flights'].json.best_flights[1].flights[0].departure_airport.time }}<br>\n                <strong>Duration:</strong> {{ $node['Flights'].json.best_flights[1].flights[0].duration }} minutes<br>\n                <strong>Type:</strong> {{ $node['Flights'].json.best_flights[1].type }}<br>\n                <strong>Price:</strong> ${{ $node['Flights'].json.best_flights[1].price }}</p>\n                \n                <h4>Included Features:</h4>\n                <ul class=\"features-list\">\n                    <li>✓ Lie flat seat</li>\n                    <li>✓ Wi-Fi for a fee</li>\n                    <li>✓ In-seat power & USB outlets</li>\n                    <li>✓ On-demand video</li>\n                    <li>✓ Carbon emissions estimate: 1380 kg</li>\n                </ul>\n            </div>\n        </div>\n        <hr>\n        \n        <!-- Hotels section -->\n        <div class=\"section\">\n            <h2>Accommodation</h2>\n            <h3><a href=\"https://www.accor.com/\" target=\"_blank\">{{ $('Hotels').item.json.brands[0].name }}</a></h3>\n            \n            <img src=\"{{ $('Hotels').item.json.properties[0].images[0].original_image }}\" alt=\"{{ $('Hotels').item.json.brands[0].name }}\" class=\"hotel-image\">\n            \n            <div class=\"hotel-info\">\n                <p><strong>Rate per night:</strong> {{ $('Hotels').item.json.properties[0].prices[0].rate_per_night.lowest }}<br>\n                <strong>Total Rate:</strong> {{ $('Hotels').item.json.properties[0].total_rate.lowest }}</p>\n                <p>Experience luxury and comfort at one of {{ $node['Webhook'].json.body.destination }}'s finest accommodations. The {{ $('Hotels').item.json.brands[0].name }} offers exceptional amenities and is ideally located for your {{ $node['Webhook'].json.body.destination }} adventure.</p>\n            </div>\n            \n            <a href=\"https://www.accor.com/\" class=\"cta-button\" target=\"_blank\">View Hotel Details</a>\n        </div>\n        <hr>\n        \n        <!-- Travel information section -->\n        <div class=\"section\">\n            <h2>Important Travel Information</h2>\n            <p>Please ensure you have the following before your departure:</p>\n            <ul>\n                <li>Valid passport with at least 6 months validity from your return date</li>\n                <li>Visa requirements (if applicable for your nationality)</li>\n                <li>Travel insurance documentation</li>\n                <li>Printed copies of your booking confirmations</li>\n            </ul>\n            \n            <p>Our team is available 24/7 to assist with any questions or concerns you may have before or during your trip. Don't hesitate to reach out to your dedicated travel advisor at <a href=\"mailto:support@worldvoyager.com\">support@worldvoyager.com</a> or call us at +1-800-VOYAGER.</p>\n        </div>\n        \n        <!-- Footer section -->\n        <div class=\"footer\">\n            <p>We wish you a wonderful journey and memorable experiences in beautiful {{ $node['Webhook'].json.body.destination }}!</p>\n            <p>Warm regards,<br>\n            The WorldVoyager Travel Team</p>\n            <hr>\n            <p>© 2025 WorldVoyager Travel Agency | <a href=\"#\">Privacy Policy</a> | <a href=\"#\">Terms of Service</a></p>\n            <p><small>This email was sent automatically. Please do not reply to this email address.</small></p>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n## Important Notes\n- Do NOT prefix your output with \"json{\" or any other text. This will cause parsing errors.\n- For the hotel link, always use \"https://www.accor.com/\" (or another appropriate hotel website) instead of the Google URL which can cause errors\n- Format the price with commas for thousands separators (e.g., $3,513 instead of $3513)\n- Make sure button text is always white using the CSS color: white !important; rule\n- For flight features, use a simple hardcoded list with checkmarks as shown in the example\n- Include helpful information like passport validity, visa requirements, etc. in the travel information section",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1400,
        0
      ],
      "id": "de299120-77ac-40f2-9f69-ec14ce460157",
      "name": "AI Email Agent"
    },
    {
      "parameters": {
        "jsCode": "const rawOutput = $('AI Email Agent').first().json.output || '';\n\n// Fix JSON prefix issue if present\nfunction fixJsonPrefix(input) {\n  if (input.startsWith('json{')) {\n    return input.substring(4);\n  }\n  return input;\n}\n\ntry {\n  // First remove json{ prefix if it exists\n  const fixedOutput = fixJsonPrefix(rawOutput);\n  \n  // Then parse the JSON\n  const parsed = JSON.parse(fixedOutput);\n  \n  // Extract the HTML content\n  const emailBody = parsed.output;\n  \n  return [{ emailBody }];\n} catch(e) {\n  // Fallback to original behavior if parsing fails\n  console.error(\"Error processing email:\", e);\n  const emailBody = rawOutput.split('\\n').filter(line => !line.startsWith('Subject:')).join('\\n');\n  return [{ emailBody }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2100,
        0
      ],
      "id": "f4797d93-7258-424c-b2c9-1ce6f90b6fe6",
      "name": "Email content"
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "engine",
              "value": "google_hotels"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"q\": \"{{ $('Webhook').item.json.body.destination }} hotels\",\n  \"check_in_date\": \"{{ $json.search_parameters.outbound_date }}\",\n  \"check_out_date\": \"{{ $json.search_parameters.return_date }}\",\n \"max_results\": 3,\n  \"adults\": 1,\n  \"currency\": \"USD\",\n  \"hl\": \"en\",\n  \"api_key\": \"ENTER_API_KEY_HERE\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        0
      ],
      "id": "6d1f6029-0ab0-41ec-8352-ea944fac76a1",
      "name": "Hotels"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={\n  \"origin\": \"{{ $json['Current location'] }}\",\n  \"destination\": \"{{ $json.Destination }}\",\n  \"departure\": \"{{ $json.departuredate }}\",\n  \"return\": \"{{ $json['return date'] }}\", \n\"email\": \"{{ $json.email }}\"\n}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Turn the origin and destination into their airport codes.  Make sure the departure and return dates are in the future, not the past.  Here is the current date/time: {{ $now }}\n\nAlso make sure the email address is well formatted with an \"@\" and no spaces. "
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        400,
        0
      ],
      "id": "16c09c5a-bf37-4e05-a0c2-db40781785d9",
      "name": "Flights codes & formatted dates"
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "ENTER_API_KEY_HERE"
            },
            {
              "name": "engine",
              "value": "google_flights"
            },
            {
              "name": "hl",
              "value": "en"
            },
            {
              "name": "gl",
              "value": "us"
            },
            {
              "name": "departure_id",
              "value": "={{ $json.output.origin }}"
            },
            {
              "name": "arrival_id",
              "value": "={{ $json.output.destination }}"
            },
            {
              "name": "outbound_date",
              "value": "={{ $json.output.departure }}"
            },
            {
              "name": "return_date",
              "value": "={{ $json.output.return }}"
            },
            {
              "name": "currency",
              "value": "EUR"
            },
            {
              "name": "travel_class",
              "value": "3"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        700,
        0
      ],
      "id": "0994fda9-1fd4-47e0-ae85-4cd9ab849fc4",
      "name": "Flights"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "GPT-3.5-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate a nice and short subject line related to this for the email we will send as travel plan. \n\n\"{{ $json.output }}\"\n\nDo not include \"\" in the subject line. "
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1760,
        0
      ],
      "id": "9bfc3ef9-1258-4fe9-82bb-a3c21890d087",
      "name": "OpenAI"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data from the previous node\nconst input = $input.first().json;\n// Extract whatsappData and aiResponse\nconst whatsappData = input.whatsappData[0];\nconst aiResponse = input.aiResponse;\n// Extract the phone number from whatsappData\nconst phoneNumber = whatsappData.contacts[0].wa_id || \"UNKNOWN_PHONE\";\n\n// Construct and return the output\nreturn {\n  json: {\n    whatsappMessage: {\n      messaging_product: \"whatsapp\",\n      recipient_type: \"individual\",\n      to: phoneNumber,\n      type: \"text\",\n      text: {\n        body: \"*Travel Plan: April 1 – April 5, 2025, Amsterdam*\\n\\n*Exciting Trip to Amsterdam!*\\n\\nGet ready for an amazing adventure in Amsterdam from April 1st to April 5th, 2025! Explore the beautiful canals, vibrant culture, and historic sites that make this city a must-visit destination. Pack your bags for an unforgettable experience!\"\n      }\n    },\n    userInfo: {\n      phone: phoneNumber,\n      name: whatsappData.contacts[0].profile.name || \"there\",\n      message: whatsappData.messages[0].text.body || \"\"\n    },\n    aiResponse: \"Introduction message sent\",\n    timestamp: new Date().toISOString()\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2840,
        100
      ],
      "id": "5e3f781d-b787-4d3b-b2d1-84b474d71251",
      "name": "Code"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1440,
        540
      ],
      "id": "7653144f-4c00-4b54-ae3c-5df356cab90c",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Hardcoded WhatsApp details\nconst phoneNumber = \"ENTER_PHONE_KEY_HERE\";\nconst firstName = \"ENTER_NAME\";\n\n// Access flight data from \"Flights codes & formatted dates\" node\nconst rawFlightData = $('Flights codes & formatted dates').first().json;\nconsole.log(\"Raw flight data:\", rawFlightData);\n\n// Extract fields with fallback\nconst flightData = rawFlightData?.output || {\n  origin: \"Belgium\",\n  destination: \"Amsterdam\",\n  departure: \"2025-04-01\",\n  return: \"2025-04-05\"\n};\nconsole.log(\"Processed flight data:\", flightData);\n\n// Format dates\nconst travelDates = flightData.departure && flightData.return ? `${flightData.departure} – ${flightData.return}` : \"April 1 – April 5, 2025\";\n\n// Create the WhatsApp API payload\nconst whatsappPayload = {\n  messaging_product: \"whatsapp\",\n  to: phoneNumber,\n  type: \"text\",\n  text: {\n    body: `Hello ${firstName}!\\n\\n*Exciting Travel Alert!* ✈️\\n\\nGet ready for your trip from *${flightData.origin || 'Belgium'}* to *${flightData.destination || 'Amsterdam'}*! 🏙️\\n\\n*Travel Dates:* ${travelDates}\\n\\nEnjoy your adventure!`\n  }\n};\n\n// Log for debugging\nconsole.log(\"Payload being returned:\", JSON.stringify([{ json: { whatsapp: whatsappPayload } }], null, 2));\n\n// Return the payload in the same structure as the working code\nreturn [{\n  json: { whatsapp: whatsappPayload }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        260
      ],
      "id": "a51829b4-a8fa-4809-a5cb-0743cf330dfa",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Hardcode a default phone number to use if webhook doesn't provide one\nconst defaultPhone = \"ENTER_PHONE_KEY_HERE\"; // Replace with your test phone number\n\n// Extract user data from webhook with fallback to default values\nconst phoneNumber = $('Webhook').item.json.body.phone || defaultPhone;\nconst userName = $('Webhook').item.json.body.name || \"Traveler\";\n\n// If phone number is still empty after fallback, use the hardcoded default\nconst finalPhoneNumber = phoneNumber.trim ? phoneNumber.trim() : defaultPhone;\nif (!finalPhoneNumber) {\n  throw new Error(\"No phone number available. Please provide a phone number.\");\n}\n\n// Extract flight data\nconst airline = $node['Flights'].json.best_flights[1].flights[0].airline || \"Airline information not available\";\nconst departureLocation = $('Webhook').item.json.body.departure || \"your departure location\";\nconst departureTime = $node['Flights'].json.best_flights[1].flights[0].departure_airport.time || \"departure time not available\";\nconst departureDate = $('Flights codes & formatted dates').item.json.output.departure || \"departure date not available\";\nconst returnDate = $('Flights codes & formatted dates').item.json.output.return || \"return date not available\";\nconst duration = $node['Flights'].json.best_flights[1].flights[0].duration || \"N/A\";\nconst features = $node['Flights'].json.best_flights[1].flights[0].extensions || \"Standard features\";\nconst price = $node['Flights'].json.best_flights[1].price || \"N/A\";\nconst flightType = $node['Flights'].json.best_flights[1].type || \"N/A\";\nconst destination = $node['Webhook'].json.body.destination || \"your destination\";\n\n// Format price with comma if needed\nconst formattedPrice = price.toString().includes(',') ? `$${price}` : `$${price}`;\n\n// Construct the flight details message\nconst flightMessage = `*FLIGHT DETAILS* ✈️\\n\\n*Airline:* ${airline}\\n*Departure:* ${departureLocation} on ${departureDate}, at ${departureTime}\\n*Return Date:* ${returnDate}\\n*Duration:* ${duration} minutes\\n*Features:* ${features}\\n*Price:* ${formattedPrice}\\n*Type:* ${flightType}\\n\\nEnjoy your trip to ${destination}! Safe travels! 🌐`;\n\n// Add logging\nconsole.log(`Sending flight details WhatsApp to: ${finalPhoneNumber}`);\n\n// Return the formatted WhatsApp message object\nreturn {\n  json: {\n    whatsappMessage: {\n      messaging_product: \"whatsapp\",\n      recipient_type: \"individual\",\n      to: finalPhoneNumber,\n      type: \"text\",\n      text: {\n        body: flightMessage\n      }\n    },\n    userInfo: {\n      phone: finalPhoneNumber,\n      name: userName,\n      message: \"\"\n    },\n    aiResponse: `Flight details for ${airline} to ${destination} sent to ${userName} (${finalPhoneNumber})`,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1940,
        260
      ],
      "id": "697018b6-2160-4dcc-9829-244bf2816d1c",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Hardcode a default phone number to use if webhook doesn't provide one\nconst defaultPhone = \"ENTER_PHONE_KEY_HERE\"; // Replace with your test phone number\n\n// Extract user data from webhook with fallback to default values\nconst phoneNumber = $('Webhook').item.json.body.phone || defaultPhone;\nconst userName = $('Webhook').item.json.body.name || \"Traveler\";\n\n// If phone number is still empty after fallback, use the hardcoded default\nconst finalPhoneNumber = phoneNumber.trim() ? phoneNumber : defaultPhone;\n\n// Extract hotel data\nconst hotelName = $('Hotels').item.json.brands[0].name || \"Hotel information not available\";\nconst hotelRating = $('Hotels').item.json.properties[0].rating || \"N/A\";\nconst hotelReviews = $('Hotels').item.json.properties[0].reviews || \"0\";\nconst hotelTotalRate = $('Hotels').item.json.properties[0].total_rate.lowest || \"N/A\";\nconst hotelImage = $('Hotels').item.json.properties[0].images[0].original_image || \"\";\nconst destination = $node['Webhook'].json.body.destination || \"your destination\";\n\n// Extract amenities if available or use default ones\nlet amenities = \"Free Wi-Fi\";\nif ($('Hotels').item.json.properties[0].amenities) {\n  // If you have an amenities array, you could join them like this\n  // amenities = $('Hotels').item.json.properties[0].amenities.join(\", \");\n}\n\n// Use accor.com or a dynamic hotel website if available\nconst hotelWebsite = \"https://www.accor.com/\";\n\n// Construct the hotel details caption\nconst hotelCaption = `*HOTEL DETAILS* 🏨\\n\\n*Name:* ${hotelName}\\n*Rating:* ${hotelRating} ⭐ (${hotelReviews} reviews)\\n*Total Rate:* ${hotelTotalRate}\\n*Amenities:* ${amenities}\\n\\nEnjoy your stay in ${destination}!\\n\\nBook here: ${hotelWebsite}`;\n\n// Add validation and logging\nconsole.log(`Sending WhatsApp to phone: ${finalPhoneNumber}`);\nif (!finalPhoneNumber) {\n  throw new Error(\"No phone number available. Please provide a phone number.\");\n}\n\n// Return the formatted WhatsApp message object with image\nreturn {\n  json: {\n    whatsappMessage: {\n      messaging_product: \"whatsapp\",\n      recipient_type: \"individual\",\n      to: finalPhoneNumber,\n      type: \"image\",\n      image: {\n        link: hotelImage,\n        caption: hotelCaption\n      }\n    },\n    userInfo: {\n      phone: finalPhoneNumber,\n      name: userName,\n      message: \"\"\n    },\n    aiResponse: `Hotel information for ${hotelName} sent to ${userName} (${finalPhoneNumber})`,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        260
      ],
      "id": "ac9fdc15-4b7b-421b-ba12-1e5801ffdd32",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "// Hardcoded WhatsApp details\nconst phoneNumber = \"ENTER_PHONE_KEY_HERE\";\nconst userName = \"Alessandro\";\n\n// Access flight data from \"Flights codes & formatted dates\" node\nconst flightDataRaw = $('Flights codes & formatted dates').first().json || {};\nconsole.log(\"Raw Flights codes data:\", flightDataRaw);\n\n// Extract fields with fallbacks\nconst flightData = flightDataRaw.output || {\n  destination: \"Amsterdam\",\n  departure: \"2025-04-01\",\n  return: \"2025-04-05\"\n};\nconst destination = flightData.destination || \"Amsterdam\";\nconst travelDates = flightData.departure && flightData.return ? `${flightData.departure} – ${flightData.return}` : \"April 1 – April 5, 2025\";\n\n// Create the WhatsApp API payload with interactive buttons\nconst whatsappPayload = {\n  messaging_product: \"whatsapp\",\n  to: phoneNumber,\n  type: \"interactive\",\n  interactive: {\n    type: \"button\",\n    body: {\n      text: `${userName}, would you like to proceed with booking your trip to ${destination} (${travelDates}) or speak to a live agent for assistance?`\n    },\n    action: {\n      buttons: [\n        {\n          type: \"reply\",\n          reply: {\n            id: \"pay_now\",\n            title: \"Make Payment\"\n          }\n        },\n        {\n          type: \"reply\",\n          reply: {\n            id: \"speak_agent\",\n            title: \"Speak to Agent\"\n          }\n        }\n      ]\n    }\n  }\n};\n\n// Log for debugging\nconsole.log(\"Payload being returned:\", JSON.stringify([{ json: { whatsapp: whatsappPayload } }], null, 2));\n\n// Return the payload in the same structure as the working code\nreturn [{\n  json: { whatsapp: whatsappPayload }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        260
      ],
      "id": "3c00fe6a-534a-4b3c-92ae-3d793856c1aa",
      "name": "Code4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v22.0/584235344774850/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ENTER_API_KEY_HERE"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Code1').item.json.whatsapp }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        540
      ],
      "id": "7260ca12-ca0f-4cd2-ad50-def45285fc52",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v22.0/584235344774850/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ENTER_API_KEY_HERE"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Code2').item.json.whatsappMessage }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1940,
        540
      ],
      "id": "91aa2e9f-902a-4e97-bfe2-6e72675c2fd5",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v22.0/584235344774850/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ENTER_API_KEY_HERE"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Code3').item.json.whatsappMessage }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2120,
        540
      ],
      "id": "ff8fec7b-2613-4425-8e50-f8832d352d4e",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v22.0/584235344774850/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ENTER_API_KEY_HERE"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Code4').item.json.whatsapp }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2320,
        540
      ],
      "id": "09f9bb76-86b6-4067-a7b1-26e5460d1ce5",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I need to format travel recommendation data for WhatsApp messages. Please generate 4 separate JavaScript code snippets that will format this data for WhatsApp messages.\n\nTravel Data:\n{\n  \"travel_advice\": {\n    \"overview\": {\n      \"departure_location\": \"Belgium\",\n      \"destination\": \"Amsterdam\",\n      \"travel_dates\": \"2025-04-01 – 2025-04-05\",\n      \"passport\": \"Required\",\n      \"age\": \"Adult\"\n    },\n    \"pre_travel_preparations\": {\n      \"visa_requirements\": \"Not required for EU citizens\"\n    },\n    \"travel_advice_details\": \"\",\n    \"flights\": [\n      {\n        \"airline\": \"Brussels Airlines\",\n        \"departure_time\": \"2025-04-01 17:30\",\n        \"return_date\": \"2025-04-05\",\n        \"duration\": \"75 minutes\",\n        \"features\": \"Average legroom (30 in), Carbon emissions estimate: 94 kg\",\n        \"price\": \"$561\",\n        \"type\": \"Round trip\"\n      }\n    ],\n    \"hotels\": [\n      {\n        \"name\": \"MEININGER Hotel Amsterdam Amstel\",\n        \"link\": \"https://www.meininger-hotels.com/en/hotels/amsterdam/hotel-amsterdam-amstel/?utm_source=gmb&utm_medium=referral&utm_campaign=AMS-JP&utm_content=website\",\n        \"image\": \"https://lh5.googleusercontent.com/p/AF1QipM1IRJTj41ehApmz226Pyy3SsMNo4EKHGCRTDl1=s10000\",\n        \"total_rate\": \"$192\",\n        \"rating\": 4.2,\n        \"reviews\": 4458,\n        \"amenities\": [\"Breakfast ($)\", \"Free Wi-Fi\", \"Parking ($)\", \"Pet-friendly\", \"Bar\", \"Kitchen in some rooms\"]\n      }\n    ]\n  }\n}\n\nGenerate 4 separate code snippets:\n\nSNIPPET 1: INTRODUCTION MESSAGE\n```javascript\n// Code for introduction message about the trip\n// Should include destination, dates, and a brief welcome message",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1420,
        300
      ],
      "id": "1f45c6bb-59b9-4636-a6bd-ad41a2424a6b",
      "name": "AI WhatsApp Agent"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Flights codes & formatted dates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Flights codes & formatted dates",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Flights codes & formatted dates",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Travel Recommendation",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Email Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Travel Recommendation": {
      "main": [
        [
          {
            "node": "AI Email Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI WhatsApp Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Email Agent": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email content": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hotels": {
      "main": [
        [
          {
            "node": "AI Agent Travel Recommendation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flights codes & formatted dates": {
      "main": [
        [
          {
            "node": "Flights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flights": {
      "main": [
        [
          {
            "node": "Hotels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Email content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI WhatsApp Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI WhatsApp Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "25765ec6-27c5-45c5-a8ca-1bb30105ec5d",
  "triggerCount": 0,
  "tags": []
}