{
  "createdAt": "2025-05-14T20:12:41.943Z",
  "updatedAt": "2025-05-14T20:15:45.007Z",
  "id": "JMEPrpUo6oEMM1Ov",
  "name": "Control de Acceso a las Herramientas del Agente segÃºn sus roles",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.from.id }}"
      },
      "id": "0a52c977-1f52-4881-be9a-b496a0c6bfee",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        900,
        600
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "id": "d192df47-e055-4c51-8ceb-604db29a0a27",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        700,
        600
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "code": {
          "supplyData": {
            "code": "const { DynamicTool } = require(\"@langchain/core/tools\");\nconst connectedTools = await this.getInputConnectionData('ai_tool', 0);\nconst allowedTools = $input.item.json.allowed_tools;\n\nconst noTool = (tool) => {\n  return new DynamicTool({\n    name: tool.getName(),\n    description: tool.description,\n    func: async () => {\n        return \"Tell the user 'You are not authorized to use this tool'.\";\n    },\n  });\n}\n\nreturn connectedTools.map(connectedTool => {\n  const permissionGranted = allowedTools.includes(connectedTool.getName());\n  return permissionGranted ? connectedTool : noTool(connectedTool);\n});"
          }
        },
        "inputs": {
          "input": [
            {
              "type": "ai_tool",
              "required": true
            }
          ]
        },
        "outputs": {
          "output": [
            {
              "type": "ai_tool"
            }
          ]
        }
      },
      "id": "aac932f8-f7c6-4712-9bc7-6b8402994bcf",
      "name": "Check permissions",
      "type": "@n8n/n8n-nodes-langchain.code",
      "position": [
        1300,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "df14d3c6-e986-444c-a0d0-626a8fc1dfd2",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        100,
        220
      ],
      "webhookId": "4410accd-63e4-4c38-ad0b-26874f5eb673",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9ea62c8f-984b-4c05-8e40-549d8035c4d3",
              "name": "name",
              "type": "string",
              "value": "={{ $json.name }}"
            },
            {
              "id": "bf74b2c4-f0d1-458a-9044-5cb1b62722e6",
              "name": "granted_roles",
              "type": "array",
              "value": "={{ $json.granted_roles || [] }}"
            },
            {
              "id": "e0f4d3d7-a916-43cb-a13d-e4453b0d1a3b",
              "name": "allowed_tools",
              "type": "array",
              "value": "={{ $json.allowed_tools || [] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1dac372f-b3d9-4285-ab4f-10c908d6ab22",
      "name": "Set input",
      "type": "n8n-nodes-base.set",
      "position": [
        760,
        340
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "mode": "list",
          "value": "app0K2OqeryZWxIt9",
          "cachedResultUrl": "https://airtable.com/app0K2OqeryZWxIt9",
          "cachedResultName": "Agent Access Control"
        },
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "tblRcEGwmycLfDuHt",
          "cachedResultUrl": "https://airtable.com/app0K2OqeryZWxIt9/tblRcEGwmycLfDuHt",
          "cachedResultName": "Users"
        },
        "filterByFormula": "={username} = '{{ $json.message.from.username }}'",
        "options": {
          "fields": [
            "granted_roles",
            "allowed_tools",
            "name"
          ]
        }
      },
      "id": "b5f35e57-d3c6-48d6-8651-4e5389173fb8",
      "name": "Get user permissions",
      "type": "n8n-nodes-base.airtable",
      "position": [
        320,
        220
      ],
      "typeVersion": 2.1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "chatInput"
            },
            {
              "name": "sessionId"
            },
            {
              "name": "allowed_tools"
            }
          ]
        }
      },
      "id": "c7b2418e-3f41-4859-9370-933f3623969a",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        340,
        1140
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93b5d2ac-8c8a-4c61-999f-2727b7ba9514",
              "name": "chatInput",
              "type": "string",
              "value": "={{ $json.chatInput }}"
            },
            {
              "id": "3f65df4c-fae1-4da3-acfd-acf352a3f8d2",
              "name": "sessionId",
              "type": "string",
              "value": "={{ $json.sessionId }}"
            },
            {
              "id": "81020154-c869-4bc8-944a-a9aee900a656",
              "name": "allowed_tools",
              "type": "array",
              "value": "={{ $json.allowed_tools }}"
            }
          ]
        },
        "options": {}
      },
      "id": "60ffcf5b-2496-42bd-a26b-201a94df8bce",
      "name": "Settings",
      "type": "n8n-nodes-base.set",
      "position": [
        560,
        1140
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "13138280-ea4d-4976-a880-f17f3f17d557",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        680,
        1400
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Settings').item.json.sessionId }}_weather_check"
      },
      "id": "34c8f3a8-480d-44c1-9b9f-0b369c93f519",
      "name": "Simple Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        880,
        1400
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "code": {
          "supplyData": {
            "code": "const { DynamicTool } = require(\"@langchain/core/tools\");\nconst connectedTools = await this.getInputConnectionData('ai_tool', 0);\nconst allowedTools = $input.item.json.allowed_tools;\n\nconst noTool = (tool) => {\n  return new DynamicTool({\n    name: tool.getName(),\n    description: tool.description,\n    func: async () => {\n        return \"Tell the user 'You are not authorized to use this tool'.\";\n    },\n  });\n}\n\nreturn connectedTools.map(connectedTool => {\n  const permissionGranted = allowedTools.includes(connectedTool.getName());\n  return permissionGranted ? connectedTool : noTool(connectedTool);\n});"
          }
        },
        "inputs": {
          "input": [
            {
              "type": "ai_tool",
              "required": true
            }
          ]
        },
        "outputs": {
          "output": [
            {
              "type": "ai_tool"
            }
          ]
        }
      },
      "id": "735b1779-8be3-4d27-8e36-1a97441dc918",
      "name": "Check permissions1",
      "type": "@n8n/n8n-nodes-langchain.code",
      "position": [
        1080,
        1400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "name": "list_granted_roles",
        "description": "Call this tool to tell the user which roles they have been granted.",
        "jsCode": "// Example: convert the incoming query to uppercase and return it\nreturn \"You are assigned the following roles: \" + $input.item.json.granted_roles.join(\", \");"
      },
      "id": "9f17559b-bc9b-4dee-a685-58d254d9b60e",
      "name": "list_granted_roles",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "position": [
        1340,
        800
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "name": "list_allowed_tools",
        "description": "Call this tool to tell the user which tools they have access to.",
        "jsCode": "return \"You have access to the following tools: \" + $input.item.json.allowed_tools.join(\", \");"
      },
      "id": "3438ed06-6f7f-4b96-a492-98742f9a17e9",
      "name": "list_allowed_tools",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "position": [
        1500,
        800
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "id": "208a5099-947b-4677-ad32-67ca9bd3770e",
      "name": "calculator",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "position": [
        1200,
        800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "0806297b-f6c4-437d-a7b9-707eae634454",
      "name": "Wikipedia",
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "position": [
        1100,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "toolDescription": "Get the GEO position by city name",
        "url": "https://geocoding-api.open-meteo.com/v1/search?name={city}&count=1",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "city",
              "description": "Name of the city",
              "type": "string"
            }
          ]
        },
        "optimizeResponse": true,
        "dataField": "results",
        "fieldsToInclude": "selected",
        "fields": "name,latitude,longitude"
      },
      "id": "e182c801-69d6-4231-8d8b-2bccc0869a4d",
      "name": "get_coordinates",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        1140,
        1600
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "toolDescription": "Get current weather by GEO data (longitude, latitude)",
        "url": "https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "longitude",
              "description": "Longitude of location. Dot as decimal separator.",
              "type": "string"
            },
            {
              "name": "latitude",
              "description": "Latitude of location. Dot as decimal separator.",
              "type": "string"
            }
          ]
        }
      },
      "id": "5de230d5-5f7f-4275-8e24-d128984a49d5",
      "name": "get_weather",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        1320,
        1600
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "name": "weather_agent",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "C1fIIooUO64D56t6",
          "cachedResultName": "Agent Access Control with Airtable and Telegram"
        },
        "workflowInputs": {
          "value": {
            "chatInput": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('chatInput', ``, 'string') }}",
            "sessionId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
            "allowed_tools": "={{ $input.item.json.allowed_tools }}"
          },
          "schema": [
            {
              "id": "sessionId",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "sessionId",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "chatInput",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "chatInput",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "allowed_tools",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "allowed_tools",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "805d3fd2-03df-4a33-9351-a26ae3e97f7f",
      "name": "weather_agent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1700,
        800
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a weather data assistant.\nYou MUST only use the provided tools to process any user input. Never use general knowledge to answer questions. If you can't use a tool, tell the user why."
        }
      },
      "id": "cc08b349-3733-44a7-a329-1c8639055ff2",
      "name": "Weather Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        780,
        1140
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "1d042f5b-ef39-4b9e-8d9c-900b39dbe3fb",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "403451bd-a8ee-41de-985f-b189fcf0d9b0",
      "name": "Unknown user",
      "type": "n8n-nodes-base.if",
      "position": [
        540,
        220
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "content": "## Choose Base\nCopy [this Airtable Template](https://airtable.com/appi5nijuvzQbZLJJ/shr8OkLysG1VtlCiz) into your workspace and select that Base here",
        "height": 300,
        "width": 220
      },
      "id": "9720a1d1-f393-42bb-a068-2bcf44479b84",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        260,
        80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Choose workflow\nSelect the current workflow as the workflow that should be called",
        "height": 300
      },
      "id": "c507b8eb-b67e-4e49-bfaa-c53e3255578b",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1620,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Uses list of allowed tools gathered from Airtable to check for permissions and replaces denied tools with a fixed instruction to return a message to the user.",
        "height": 220,
        "width": 380,
        "color": 7
      },
      "id": "4746fe33-f720-4554-bcb6-121d808e3fd8",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1240,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Tools can also be connected without a permission check",
        "height": 220,
        "width": 200,
        "color": 7
      },
      "id": "a7715ac6-187e-47bb-8b3c-7643fd5c193b",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1040,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Main agent with the instruction to always use the connected tools instead of general knowledge",
        "height": 240,
        "width": 380,
        "color": 7
      },
      "id": "51fbe2bd-5bed-4edc-955c-142ebbed26f1",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        920,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Collects input and formats it using required keys",
        "height": 240,
        "width": 220,
        "color": 7
      },
      "id": "7ca5f841-5edf-4197-a204-5d7e0481b9e2",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        700,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Collects and formats input from parent workflow / agent",
        "height": 240,
        "width": 220,
        "color": 7
      },
      "id": "0dd9fbaa-2bef-4710-a7f8-6a54a4b676c2",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        500,
        1060
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Uses the same technique as the main agent to check for permissions using the same parameters which were passed to this sub-agent.",
        "height": 220,
        "width": 380,
        "color": 7
      },
      "id": "0a1b4491-c252-4c52-91e3-08006e42e4a1",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1020,
        1300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Sub-agent with specific role to handle weather information. Also having the instruction to strictly only use the connected tools.",
        "height": 240,
        "width": 380,
        "color": 7
      },
      "id": "7d8e5e17-4740-4a13-8748-2fac138ccb9d",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        720,
        1060
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=Unknown user '{{ $('Telegram Trigger').item.json.message.from.username }}'. Please contact your supervisor.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "e2f3c854-b3e3-4ae8-ae70-0f58156ee1fa",
      "name": "Reply: unknown user",
      "type": "n8n-nodes-base.telegram",
      "position": [
        760,
        100
      ],
      "webhookId": "510028ef-060f-4ce7-898e-f1a2a376780c",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "4ec65f3e-bb57-4b91-9169-936735a9cd5c",
      "name": "Reply with results",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1360,
        340
      ],
      "webhookId": "97bc8ca7-d40a-41d6-9cc2-4c9943313fb4",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger').item.json.message.text }}",
        "options": {
          "systemMessage": "=You are a personal assistant. The name of the current user is \"{{ $json.name }}\"\nYou MUST only use the provided tools to process any user input. Never use general knowledge to answer questions. If you can't use a tool, tell the user why.",
          "returnIntermediateSteps": true
        }
      },
      "id": "5d3372f7-8535-4d0c-ae16-471d0e4f54ce",
      "name": "Main Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        980,
        340
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "content": "Be aware, that previous responses may still exist after permission changes",
        "height": 220,
        "width": 200,
        "color": 6
      },
      "id": "f4e38674-93d0-4957-a874-7efd949c255d",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        840,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Uses different session ID (suffix), since every agent needs its own memory",
        "height": 220,
        "width": 200,
        "color": 7
      },
      "id": "fe721583-6dad-4da9-8baa-829ef87a116f",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        820,
        1300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Listens to messages directly sent to the bot",
        "height": 240,
        "width": 220,
        "color": 7
      },
      "id": "f6789697-322a-415b-8e65-4bde9da304ec",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        40,
        140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Checks if the user was found in Airtable",
        "height": 240,
        "width": 220,
        "color": 7
      },
      "id": "f50e1a39-c745-4c72-b6fc-e70cc8911d43",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#\n\nhttps://n8n.io/workflows/3988-access-control-for-ai-agents-rbac-using-airtable-and-telegram/"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -360,
        20
      ],
      "id": "53bcaa6d-f129-41ec-aeef-fadea3b9085a",
      "name": "Sticky Note13"
    }
  ],
  "connections": {
    "Settings": {
      "main": [
        [
          {
            "node": "Weather Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set input": {
      "main": [
        [
          {
            "node": "Main Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia": {
      "ai_tool": [
        [
          {
            "node": "Main Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Main Agent": {
      "main": [
        [
          {
            "node": "Reply with results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculator": {
      "ai_tool": [
        [
          {
            "node": "Check permissions",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_weather": {
      "ai_tool": [
        [
          {
            "node": "Check permissions1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Unknown user": {
      "main": [
        [
          {
            "node": "Reply: unknown user",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Main Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "weather_agent": {
      "ai_tool": [
        [
          {
            "node": "Check permissions",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Weather Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "get_coordinates": {
      "ai_tool": [
        [
          {
            "node": "Check permissions1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Get user permissions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check permissions": {
      "ai_tool": [
        [
          {
            "node": "Main Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Main Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Check permissions1": {
      "ai_tool": [
        [
          {
            "node": "Weather Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Weather Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "list_allowed_tools": {
      "ai_tool": [
        [
          {
            "node": "Check permissions",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "list_granted_roles": {
      "ai_tool": [
        [
          {
            "node": "Check permissions",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get user permissions": {
      "main": [
        [
          {
            "node": "Unknown user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "db46d409-3193-43ff-878f-b7dd240c4e57",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-05-14T16:32:00.549Z",
      "updatedAt": "2025-05-14T16:32:00.549Z",
      "id": "Iclv9UoFDTaMkrdm",
      "name": "Base"
    }
  ]
}