{
  "createdAt": "2025-05-14T16:46:45.166Z",
  "updatedAt": "2025-05-14T16:46:55.014Z",
  "id": "3tRp9Vkf4cxCTiVw",
  "name": "RRSS Feed Chatbot",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "bd3c3d2c-f3e2-4558-ba1b-44e39081d0c1",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        160,
        260
      ],
      "webhookId": "233b5b66-aef1-424e-8e48-701f8788c41f"
    },
    {
      "parameters": {
        "content": "# Embedding Process\n- Watch RSS Feeds for updates\n- Loop to reduce likelihood of http request error\n- Clean HTML scrape\n- Embed in Supabase\n\n",
        "height": 168,
        "width": 722,
        "color": 6
      },
      "id": "29b8857d-a552-42aa-9a13-a4de775cfccc",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1260,
        0
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1000,
        600
      ],
      "id": "699d907d-9615-4097-b9f2-6dc2e3da748a",
      "name": "GPT 4o mini",
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "e00c9547-6b1f-46b3-9533-f83635d3d1b9",
      "name": "Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        2060,
        280
      ],
      "credentials": {
        "supabaseApi": {
          "id": "rdCQd4QhC2yt5cEY",
          "name": "Supabase Germán - Versión WEB"
        }
      }
    },
    {
      "parameters": {
        "content": "## Update Knowledge Base",
        "height": 540,
        "width": 560,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2020,
        200
      ],
      "id": "8025e4e5-4f2f-4664-908c-32955bbbfc45",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        2120,
        500
      ],
      "id": "8a6dba80-caa3-4bce-9be9-7d01f8a3da63",
      "name": "text-embedding-3-small",
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "chunkSize": 2000,
        "chunkOverlap": 200,
        "options": {
          "splitCode": "markdown"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2340,
        580
      ],
      "id": "1b74ef02-0a9f-448e-9faa-7ff3d4c77ea7",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=Publish Date",
                "value": "={{ $json.publishDate }}"
              },
              {
                "name": "=Extraction Date",
                "value": "={{ $json.extractedAt }}"
              },
              {
                "name": "=content",
                "value": "={{ $json.content }}"
              }
            ]
          }
        }
      },
      "id": "6d222d4d-cd27-4871-a5e4-66954f9e3dff",
      "name": "Enhanced Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2240,
        440
      ]
    },
    {
      "parameters": {
        "content": "## Message AI Agent \n\n\n",
        "height": 280,
        "width": 580,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        180
      ],
      "id": "e88331cd-8173-4417-8557-b20af0c816ca",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "## Connected to GPT-4o mini\n- double click to change LLM",
        "width": 460
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        20,
        500
      ],
      "id": "fed2a126-cf2a-4166-ab9d-65e6ca3057fd",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=*Role:\nYou are a helpful and intelligent chatbot.\n\nTask:\n-You will retrieve information from the vector store and output relevant information in response to the user query.\n- Show publish dates with each piece of information.\n- Display the information clearly in bullet points, clearly showcasing everything neatly.\n\n\nConstraints:\n- *ALWAYS* reference information from vector store.\n- If no information is found, stop the process and do not formulate your own responseto the query.\n- Only show articles up to 3 days old, from  {{ $now }}\n\n"
        }
      },
      "id": "d0ef87e6-997a-4413-811a-a57688eb2cf8",
      "name": "RAG Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        340,
        260
      ]
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "id": "17ee253a-bd94-467b-859a-8aaa4f92f0f7",
      "name": "Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.1,
      "position": [
        500,
        720
      ],
      "credentials": {
        "postgres": {
          "id": "4tfj1sNRRyn5YqsH",
          "name": "Postgres Germán"
        }
      }
    },
    {
      "parameters": {
        "content": "## Postgres database\n- can use Window Memory Buffer\n- Postgres allows scalability, and stores data externally",
        "width": 600
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        20,
        680
      ],
      "id": "340482bd-5bae-4776-8bd6-14c81f9b9f4b",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "85a78436-c2e9-42ac-97c8-618b4b0a6d38",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        340,
        540
      ],
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "99a0906e-bc0f-46e5-a8a4-fe376a53e993",
      "name": "Supabase Knowledge Base",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        900,
        860
      ],
      "credentials": {
        "supabaseApi": {
          "id": "rdCQd4QhC2yt5cEY",
          "name": "Supabase Germán - Versión WEB"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c34aebb5-96a5-4228-86ff-784bd110fc59",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        740,
        1000
      ],
      "credentials": {
        "openAiApi": {
          "id": "lid4f6Emqj7mGAPQ",
          "name": "OpenAi API Averis"
        }
      }
    },
    {
      "parameters": {
        "content": "# RSS Feed Chatbot\n## Let me know if you have any questions. Certainly some room for improvement\n## Feel free to reach out at martin@malenAI.com",
        "height": 1180,
        "width": 1200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "f4709dae-2c2c-4220-b8ce-6b37fe5d5b3e",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "name": "project_data",
        "description": "Retrieve information from vector store."
      },
      "id": "ac579c42-79b2-42b1-a0d9-da0bfce732f6",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        800,
        480
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1500,
        300
      ],
      "id": "c00f5c25-604a-4dee-822a-1c79030aa2a6",
      "name": "Loop_"
    },
    {
      "parameters": {
        "url": "={{ $json.link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1640,
        400
      ],
      "id": "35c18b26-db9c-49f2-866c-9e483ae34883",
      "name": "HTTP Request",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Watch RSS Feed Update -> store as embedding\n",
        "height": 440,
        "width": 720
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1260,
        220
      ],
      "id": "9b167ad8-6d87-4b82-9d8a-691db8938e66",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "hour": 0
            }
          ]
        },
        "feedUrl": "https://stackoverflow.blog/feed/"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        1300,
        300
      ],
      "id": "65f62669-ad40-4a61-b65c-da3eea741566",
      "name": "RSS Feed Trigger"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the HTML content from the response\nconst html = $json.data\n\n// Simple HTML to text converter function\nfunction htmlToText(html) {\n  return html\n    .replace(/<style[^>]*>.*?<\\/style>/gs, '')\n    .replace(/<script[^>]*>.*?<\\/script>/gs, '')\n    .replace(/<header[^>]*>.*?<\\/header>/gs, '')\n    .replace(/<footer[^>]*>.*?<\\/footer>/gs, '')\n    .replace(/<nav[^>]*>.*?<\\/nav>/gs, '')\n    .replace(/<aside[^>]*>.*?<\\/aside>/gs, '')\n    .replace(/<[^>]+>/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .replace(/&nbsp;/g, ' ')\n    .replace(/&[^;]+;/g, '')\n    .trim();\n}\n\n// Extract publish date using multiple methods\nfunction extractPublishDate(html) {\n    const metaDateMatch = html.match(/<meta property=\"article:published_time\" content=\"([^\"]+)\"/i) ||\n                         html.match(/<meta name=\"published_time\" content=\"([^\"]+)\"/i) ||\n                         html.match(/<meta name=\"date\" content=\"([^\"]+)\"/i);\n    \n    if (metaDateMatch) {\n        return new Date(metaDateMatch[1]).toISOString();\n    }\n\n    const schemaMatch = html.match(/<script type=\"application\\/ld\\+json\">[^{]*({[\\s\\S]*?})[^}]*<\\/script>/i);\n    if (schemaMatch) {\n        try {\n            const schema = JSON.parse(schemaMatch[1]);\n            if (schema.datePublished) {\n                return new Date(schema.datePublished).toISOString();\n            }\n        } catch (e) {}\n    }\n\n    const datePattern = /(?:Published|Updated|Posted on|Date):\\s*([A-Za-z]+\\s+\\d{1,2},\\s+\\d{4})|(\\d{4}-\\d{2}-\\d{2})/i;\n    const dateMatch = html.match(datePattern);\n    if (dateMatch) {\n        const dateStr = dateMatch[1] || dateMatch[2];\n        return new Date(dateStr).toISOString();\n    }\n\n    return new Date().toISOString();\n}\n\n// Extract content\nlet content = '';\nconst articleMatch = html.match(/<article[^>]*>([\\s\\S]*?)<\\/article>/i);\n\nif (articleMatch && articleMatch[1]) {\n  content = htmlToText(articleMatch[1]);\n} else {\n  content = htmlToText(html);\n}\n\n// Clean up the content\nconst cleanContent = content\n  .replace(/\\s+/g, ' ')\n  .replace(/\\n+/g, '\\n')\n  .replace(/\\t+/g, ' ')\n  .trim();\n\n// Remove common navigation text and footer text\nconst finalContent = cleanContent\n  .replace(/Menu.*?Search/g, '')\n  .replace(/Share this article/g, '')\n  .replace(/Related articles/g, '')\n  .replace(/Leave a comment/g, '');\n\nreturn {\n  json: {\n    content: finalContent,\n    publishDate: extractPublishDate(html),\n    extractedAt: new Date().toISOString()\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1800,
        400
      ],
      "id": "ccfc72d1-713c-4b5c-b4a3-7b018a900705",
      "name": "Cleanse Data"
    },
    {
      "parameters": {
        "content": "## Vector Store Tool\n- allows for retrieval of data in Knowledge Base",
        "height": 420,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        300
      ],
      "id": "880a9ecc-36fa-4b70-b9fb-0560c001bdd7",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "content": "## Knowledge Base\n- ensure embeddings match database ",
        "height": 380,
        "width": 520
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        660,
        760
      ],
      "id": "33a8c1ab-7d63-4e6f-890c-3df3256c3c7c",
      "name": "Sticky Note18"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "RAG Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT 4o mini": {
      "ai_languageModel": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "text-embedding-3-small": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Enhanced Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Knowledge Base": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Tool",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Knowledge Base",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Loop_": {
      "main": [
        [
          {
            "node": "Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Cleanse Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Feed Trigger": {
      "main": [
        [
          {
            "node": "Loop_",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanse Data": {
      "main": [
        [
          {
            "node": "Loop_",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "819b4064-29fb-4b7b-8496-498942c3d08f",
  "triggerCount": 0,
  "tags": []
}