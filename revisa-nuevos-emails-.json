{
  "createdAt": "2025-04-29T14:09:04.391Z",
  "updatedAt": "2025-04-29T14:09:04.391Z",
  "id": "dl8tWpWbiwtBUFOT",
  "name": "Revisa nuevos Emails",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "limit": 100,
        "filters": {
          "receivedAfter": "={{ $now.minus(30, 'minutes') }}"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -5080,
        860
      ],
      "id": "0a16c147-2306-41c9-828e-73331b1b3c98",
      "name": "New Emails",
      "webhookId": "70e0c13e-5f70-4330-861a-03b400acafeb"
    },
    {
      "parameters": {
        "jsCode": "// Loop through each incoming item\nfor (let item of items) {\n  const from = item.json.From;\n  if (typeof from === 'string') {\n    // If it’s in the form \"Name <email@domain.com>\", extract the part inside <>\n    const match = from.match(/<([^>]+)>/);\n    // If regex matched, use the captured email; otherwise leave it as-is\n    item.json.From = match ? match[1] : from;\n  }\n}\n\n// Return the modified items back to the workflow\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4880,
        860
      ],
      "id": "6100785a-c57d-4cc8-b7d4-4fc16917258e",
      "name": "Fix 'From'"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "77968881-2fcf-415a-944d-0968a36a7834",
              "leftValue": "={{ $json.From }}",
              "rightValue": "kiaghasem.dev@gmail.com",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -4660,
        860
      ],
      "id": "4ab46e20-e837-445a-ab5d-9b3b79511f99",
      "name": "Filter Inbound"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "get",
        "threadId": "={{ $json.threadId }}",
        "simple": false,
        "options": {
          "returnOnlyMessages": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -4020,
        720
      ],
      "id": "017cd069-0d97-4fff-85ad-78d9355fd48a",
      "name": "Get Full Thread",
      "webhookId": "2929c400-1468-4c14-9d87-19e351d372c1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Function node – Group e‑mails by thread + add dateTime\n * Output structure:\n * [\n *   {\n *     threadId: '…',\n *     emails: [\n *       { dateTime:'2025‑04‑19T17:56:43+10:00', from:'rep'|'customer', message:'…' },\n *       …\n *     ]\n *   },\n *   …\n * ]\n */\n\nconst REP_ADDRESSES = [\n  'kiaghasem.dev@gmail.com'\n].map(a => a.toLowerCase());\n\n/* ---------- helpers ---------- */\nfunction decodeBody(payload) {\n  if (payload?.body?.data) return b64(payload.body.data);\n\n  if (Array.isArray(payload?.parts)) {\n    const part =\n      payload.parts.find(p => p.mimeType === 'text/plain' && p.body?.data) ??\n      payload.parts.find(p => p.mimeType === 'text/html'  && p.body?.data);\n    if (part) return b64(part.body.data);\n  }\n  return '';\n}\n\nfunction b64(str) {\n  const normalised = str.replace(/-/g, '+').replace(/_/g, '/');\n  return Buffer.from(normalised, 'base64').toString('utf8');\n}\n\nfunction whoIsSender(fromHeader) {\n  const match = fromHeader.match(/<([^>]+)>/);\n  const email = (match ? match[1] : fromHeader).trim().toLowerCase();\n  return REP_ADDRESSES.includes(email) ? 'rep' : 'customer';\n}\n\n/** Convert Gmail internalDate (ms since epoch) ➜ ISO‑8601 in Australia/Sydney */\nfunction formatDateTime(internalDate) {\n  const date = new Date(Number(internalDate));\n  return new Intl.DateTimeFormat('en-AU', {\n    timeZone: 'Australia/Sydney',\n    year:   'numeric',\n    month:  '2-digit',\n    day:    '2-digit',\n    hour:   '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  }).format(date)                         // \"19/04/2025, 17:56:43\"\n    .replace(',', '')                     // remove comma\n    .replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/, '$3-$2-$1') // to YYYY‑MM‑DD\n    .replace(' ', 'T') + '+10:00';        // add ISO T separator + offset\n}\n\n/* ---------- main ---------- */\nconst rawItems = $input.all();\nconst threads = new Map();\nconst orderedThreads = [];\n\nfor (const { json } of rawItems) {\n  const threadId = json.threadId;\n  if (!threads.has(threadId)) {\n    const newThread = { threadId, emails: [] };\n    threads.set(threadId, newThread);\n    orderedThreads.push(newThread);\n  }\n\n  const emailObj = {\n    dateTime: formatDateTime(json.internalDate),\n    from:     whoIsSender(json.From ?? json.from ?? ''),\n    message:  decodeBody(json.payload),\n  };\n\n  threads.get(threadId).emails.push(emailObj);\n}\n\nreturn orderedThreads.map(t => ({ json: t }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3840,
        720
      ],
      "id": "301848e2-af04-4bbb-8a7c-8a4a0ae588ee",
      "name": "Reformat Thread"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e33598c-17cb-497a-88f5-9cd3583211f7",
              "name": "emailAddress",
              "value": "={{ $json.From }}",
              "type": "string"
            },
            {
              "id": "3ee95587-c503-42bf-8625-ce60b28569d7",
              "name": "threadIdToMatch",
              "value": "={{ $json.threadId }}",
              "type": "string"
            },
            {
              "id": "3c21c0cc-06d4-41b0-86c2-fee9032fdc12",
              "name": "messageId",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3920,
        880
      ],
      "id": "8208a4cb-b267-4fec-8a83-1bb23ffe764f",
      "name": "Extract Email Address"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -5300,
        860
      ],
      "id": "26cef373-e825-4bb7-9fd6-1eed7efe3649",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "threadId",
              "field2": "threadIdToMatch"
            }
          ]
        },
        "options": {
          "multipleMatches": "all"
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -3420,
        840
      ],
      "id": "cc1625ff-650f-4cb3-8658-441eb613b934",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A new email has just been received. \n\nHere's the email:\n\n{{ $json.output.newProspectEmail }}\n\nHere's the summary of the email thread: \n\n{{ $json.output.previousEmails || \"No previous emails in this thread\"}}\n\nWe checked the email address in our CRM. Here's all the notes we found on the account associated with the email address: \n\n{{ $('Edit Fields').first().json.notes }}\n\nCategorise according to instructions. ",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You work at Kamexa which is an AI Automation Agency. \n\nYou're responsible for categorising inbound emails as Sales, Customer Service or Other. \n\nTo do this you must read through the thread of that email (previous emails) and classify accordingly. \n\n1. Sales: \nSales emails are those should be handled by the sales department of Kamexa. They will be related to a potential sales or revenue opportunity for Kamexa. \n\n2. Customer Service: \nThese emails are those that should be handles by the CSR team at Kamexa. They are support emails that should be handled by the admin team. \n\n3. Other: \nThese are all other emails not related to Sales or CSR. They might be finance related, promotional, spam etc. \n\n# Additional Instructions\n\n- Your output must follow the schema defined. \n- If the email is just a \"thank you\" email or does not require a reply, then classify it as 'Other'. "
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -920,
        820
      ],
      "id": "6540f829-1b5a-45f1-b046-b1a6fccbd8fb",
      "name": "Categorisation"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.category }}",
                    "rightValue": "Sales",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ac58a9f7-d5fd-43d0-81c1-97ba407e58d3"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Sales"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3171ef88-047f-4219-bbb9-47d8df055f05",
                    "leftValue": "={{ $json.output.category }}",
                    "rightValue": "Customer Service",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Customer Service"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1138c384-3766-450a-8097-13e484b0b2bc",
                    "leftValue": "={{ $json.output.category }}",
                    "rightValue": "Other",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Other"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -200,
        820
      ],
      "id": "c1320371-ea14-4195-8c4b-9b83bb05b8ab",
      "name": "Switch"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "OiexzAMhFLvrWe7w",
          "mode": "list",
          "cachedResultName": "Inbox Manager - Sales Agent - Quick Reply Ruby"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "threadId": "={{ $('Merge').item.json.threadId }}",
            "messageId": "={{ $('Merge').item.json.messageId }}",
            "emailAddress": "={{ $('Merge').item.json.emailAddress }}",
            "notes": "={{ $('Edit Fields').item.json.notes }}",
            "newEmail": "={{ $('Fix Email Format').item.json.output.newProspectEmail }}",
            "contactId": "={{ $('Search Contact').item.json.contacts[0].id || null }}",
            "threadSummary": "={{ $('Fix Email Format').item.json.output.previousEmails || \"No prior emails in thread\"}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "emailAddress",
              "displayName": "emailAddress",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "threadId",
              "displayName": "threadId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageId",
              "displayName": "messageId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "notes",
              "displayName": "notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "newEmail",
              "displayName": "newEmail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "threadSummary",
              "displayName": "threadSummary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "contactId",
              "displayName": "contactId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        260,
        120
      ],
      "id": "1ef145bc-7706-46bc-a1de-ec37ae630150",
      "name": "Call Sales Agent"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "17WiTiRukrvRRS61",
          "mode": "list",
          "cachedResultName": "Inbox Manager - CSR Agent - CSR Sarah"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "emailAddress": "={{ $('Merge').item.json.emailAddress }}",
            "threadId": "={{ $('Merge').item.json.threadId }}",
            "messageId": "={{ $('Merge').item.json.messageId }}",
            "notes": "={{ $('Edit Fields').item.json.notes }}",
            "newEmail": "={{ $('Fix Email Format').item.json.output.newProspectEmail }}",
            "threadSummary": "={{ $('Fix Email Format').item.json.output.previousEmails }}",
            "contactId": "={{ $('Search Contact').item.json.contacts[0].id || null }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "emailAddress",
              "displayName": "emailAddress",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "threadId",
              "displayName": "threadId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "messageId",
              "displayName": "messageId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "notes",
              "displayName": "notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "newEmail",
              "displayName": "newEmail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "threadSummary",
              "displayName": "threadSummary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "contactId",
              "displayName": "contactId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        580,
        1020
      ],
      "id": "25a747c7-538c-4625-a804-5c74543fc6ed",
      "name": "Call CSR Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an email-triage assistant. Your job is to read an incoming email (subject and body) and decide whether it is important/urgent or not. \n\nCriteria for “important” include, but are not limited to:\n- Requests or questions from executives, VIP clients, stakeholders, or regulators  \n- Deadline-driven tasks, legal matters, compliance issues, billing or payment problems  \n- System outages, security incidents, or anything impacting operations or reputation  \n- Explicit markers like “urgent,” “ASAP,” “immediately,” or “time-sensitive”  \n- Issues requiring coordination across teams or elevated visibility  \n- Any email from a current, past, future or potential customer \n\nOtherwise, it's 'Not'.\n\nPromotional emails or other companies selling us a service via email is Not important. \n\nYour output must follow the defined schema. \n\nDo not output anything else—no explanations, no extra text.\n  \n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        120,
        1780
      ],
      "id": "959dc027-2fd0-4fb6-9eda-b3afa2021c1a",
      "name": "Importance Scoring"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.label }}",
                    "rightValue": "Important",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "4ca65b81-0ba9-4818-9206-102af38cc525"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Important"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ff128519-0bef-4f70-833a-37bdb6f459d6",
                    "leftValue": "={{ $json.output.label }}",
                    "rightValue": "Not",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Not Important"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        580,
        1780
      ],
      "id": "a0d1700e-fd43-4174-af7a-90eb34e8f9c5",
      "name": "Switch1"
    },
    {
      "parameters": {
        "chatId": "YOUR-CHAT-ID",
        "text": "=### Important Email Alert! ###  \n\n### From -   {{ $('Merge').item.json.emailAddress }}\n\n---------------------------------------------------------  \n\n### New Email ### \n\n{{ $('Fix Email Format').item.json.output.newProspectEmail }}\n\n--------------------------------------------------------- \n\n### Thread Context ### \n\n{{ $('Fix Email Format').item.json.output.previousEmails || \"No thread\"}}\n\n--------------------------------------------------------- \n\n### CRM Notes ### \n\n{{ $('Edit Fields').item.json.notes }}\n\n\nPlease respond to them as soon as you can! ",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        980,
        1760
      ],
      "id": "b22e6039-155e-475e-8a56-aa77b9b430cd",
      "name": "Notify",
      "webhookId": "f6d7ed4d-cbee-4176-80b2-5b392e11592f"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"'Sales', 'Customer Service' or 'Other'.\"\n    }\n  },\n  \"required\": [\n    \"category\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -700,
        1040
      ],
      "id": "16167b93-6f65-4c76-b689-2995c30b2ea8",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1020,
        1060
      ],
      "id": "2dc7e35d-170f-434d-bc74-bb6390753249",
      "name": "OpenAI Chat Model1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/contacts/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer <YOUR-API-KEY>"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            },
            {
              "name": "Version",
              "value": "2021-07-28  "
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"locationId\": \"YOUR-ID-HERE\",\n  \"page\": 1,\n  \"pageLimit\": 20,\n  \"filters\": [\n    {\n      \"field\": \"email\",\n      \"operator\": \"eq\",\n      \"value\": \"{{ $json.emailAddress }}\"\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3140,
        840
      ],
      "id": "76489ac7-2125-46e6-a0af-c1320e2b50c6",
      "name": "Search Contact",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "=https://services.leadconnectorhq.com/contacts/{{ $json.contacts[0].id }}/notes",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer YOUR-API-HERE"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            },
            {
              "name": "Version",
              "value": "2021-07-28  "
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2540,
        580
      ],
      "id": "431a2a05-3943-41bf-98d1-daed1477c913",
      "name": "Get All Notes"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n - Function node\n * Converts the “notes” array on each item into a single Markdown string.\n * Resulting items look like:  { json: { notes: \"Note#1:\\n2025-04-26T03:56:06.568Z\\n…\\n\\nNote#2:\\n…\" } }\n */\n\nreturn items.map(item => {\n\t// Guard against missing or malformed data\n\tconst noteArray = Array.isArray(item.json.notes) ? item.json.notes : [];\n\n\t//  Build the combined note string\n\tconst combinedNotes = noteArray\n\t\t.map((note, idx) =>\n\t\t\t`Note#${idx + 1}:\\n${note.dateAdded}\\n${note.body || ''}`)\n\t\t.join('\\n\\n');          // blank line between notes\n\n\t//  Output a brand-new item that keeps only the “notes” field\n\treturn {\n\t\tjson: {\n\t\t\tnotes: combinedNotes,\n\t\t},\n\t};\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2300,
        580
      ],
      "id": "1999b74e-63a4-4ee0-afbf-7270203d5727",
      "name": "Format Notes into Markdown"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e8e0ecc9-1e2a-4a44-bb37-d52fca6cebfb",
              "leftValue": "={{ $json.total }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2920,
        840
      ],
      "id": "73622be8-ef16-402b-a145-749cb718868a",
      "name": "Existing Contact? "
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4400,
        860
      ],
      "id": "86b519c9-dedd-4d50-9d34-26474bb2da1e",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -4060,
        460
      ],
      "id": "2c72427c-35a4-4e3b-889a-5f4e30b7917f",
      "name": "Done"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1600,
        1040
      ],
      "id": "3cfa8708-f69e-45f2-b850-b78d290f7d57",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"newProspectEmail\": {\n      \"type\": \"string\",\n      \"description\": \"The body content of the new email received by the prospect which we need to answer.\"\n    },\n      \"previousEmails\": {\n      \"type\": \"string\",\n      \"description\": \"Summary of previous emails in the same thread in dotpoint format. If only one email then leave this empty.\"\n    }\n  },\n  \"required\": [\n    \"newProspectEmail\",\n    \"previousEmails\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1300,
        1020
      ],
      "id": "2ed26cf7-00fc-4833-b0fc-97d142a2dfc1",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5fa8682a-b96b-4927-8f02-0b478f4ce166",
              "name": "notes",
              "value": "={{ $json.notes || \"New lead - no notes\" }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2000,
        820
      ],
      "id": "17978e26-e7ac-4fba-99f8-535230495e34",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here's a new email thread in JSON String: \n\n{{ $('Merge').item.json.emails.toJsonString() }}\n",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You're an inbox manager. A new email was received in your inbox.   \n\nThe emails are given to you in JSON String formatting.   \n\nYour job is to reformat them into an easier readable format by following below steps.   \n\nYou must:   \n\n1. Identify the newest email which was just recived and extract this email.   \nThis email will be have just been received just now (exact time now = {{ $now }}). Each email has the previous email at the end of it so you must determine when it is referencing a previous email and remove that so the final output is just the new email body. Put this in the newPorspectEmail parameter of your output. This email will always be from the Customer. \n\n2. Summarise the previous emails in the thread in dotpoint format so your manager can quickly read over it for context. Put this in the previousEmails parameter.   \nSometimes the email won't have previous emails. In this case just leave the previousEmails parameter empty.\n\nKeep in mind the thread goes from oldest email at top to newest email at the bottom. \n\nYour output must follow the schema defined."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1500,
        820
      ],
      "id": "cf37dc73-a974-4353-9297-1493f8a0852a",
      "name": "Fix Email Format"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        0,
        1980
      ],
      "id": "fc6c340a-9442-4a7b-aba3-301ecc3a52c4",
      "name": "OpenAI Chat Model2"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"label\": {\n      \"type\": \"string\",\n      \"description\": \"'Important' for important/urgent emails. 'Not' for all other emails.\"\n    }\n  },\n  \"required\": [\n    \"label\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        420,
        1960
      ],
      "id": "b03415e6-1045-4e0b-8053-ddcdd6879c3f",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://services.leadconnectorhq.com/contacts/{{ $('Search Contact').item.json.contacts[0].id }}/notes",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR-API-HERE"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "YOUR-UID-HERE"
            },
            {
              "name": "body",
              "value": "=Type: Email\nFrom: Customer\nThreadId: {{ $('Merge').item.json.threadId }}\n\n{{ $('Fix Email Format').item.json.output.newProspectEmail }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2100,
        1520
      ],
      "id": "a465887c-e152-4657-823f-7f5a58c42154",
      "name": "Create Note - Input"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/contacts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR-API-HERE"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"firstName\": \"{{ $json.output.name }}\",\n  \"email\": \"{{ $('Merge').item.json.emailAddress }}\",\n  \"locationId\": \"YOUR-ID-HERE\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2800,
        1940
      ],
      "id": "1ddd8ba2-e518-4418-b4b4-01c5606865e7",
      "name": "Create Contact"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"name of the person\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2640,
        2140
      ],
      "id": "cb5adc76-579f-4e76-a147-d81ffc0cbefd",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here's the email: \n\n{{ $('Fix Email Format').item.json.output.newProspectEmail }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Your job is to read an email and identify the name of the sender. \n\nThey usually put this at the bottom of their email.\n\nYour output must follow the defined schema."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2380,
        1940
      ],
      "id": "02c6ef26-542c-4b35-af75-47a5713170a8",
      "name": "Name Finder"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://services.leadconnectorhq.com/contacts/{{ $json.contact.id }}/notes",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR-API-HERE"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "YOUR-UID-HERE"
            },
            {
              "name": "body",
              "value": "=Type: Email\nFrom: Customer\nThreadId: {{ $('Merge').item.json.threadId }}\n\n{{ $('Fix Email Format').item.json.output.newProspectEmail }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3100,
        1940
      ],
      "id": "673353c7-22e4-4fb3-bcd8-dd4946d2f79b",
      "name": "Create Note - Input1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "openai/gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2260,
        2140
      ],
      "id": "31b8c341-461b-4d17-86e3-953811c1ccd4",
      "name": "OpenAI Chat Model3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3aa4ee05-7c16-4513-928d-61dae542a4c3",
              "leftValue": "={{ $('Search Contact').item.json.contacts[0].id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1660,
        1760
      ],
      "id": "9b20af9c-d230-4d2f-997a-cd7a5ac44d33",
      "name": "In CRM?"
    },
    {
      "parameters": {
        "content": "# Get New Emails",
        "height": 1000,
        "width": 2100,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5360,
        380
      ],
      "typeVersion": 1,
      "id": "8fdaf0d6-3d2e-461c-9f8d-adb4a482f772",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Check CRM - Context ",
        "height": 1000,
        "width": 1420
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3240,
        380
      ],
      "typeVersion": 1,
      "id": "986bba66-82fe-4f82-ab3f-e3ddfba43d5b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# Categorisation ",
        "height": 1000,
        "width": 1420,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1800,
        380
      ],
      "typeVersion": 1,
      "id": "65838fed-7382-429f-8dd3-4f6e3cb3fbb3",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Quick Reply Ruby ",
        "height": 400,
        "width": 500,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "ab8f0aa3-30ae-4826-8a31-119657dfe4de",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# Quick Support Sally",
        "height": 400,
        "width": 500,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        920
      ],
      "typeVersion": 1,
      "id": "59387e0a-9e17-4bed-a5dd-f22ce1047521",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "# Other - Notification",
        "height": 760,
        "width": 1580,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -220,
        1540
      ],
      "typeVersion": 1,
      "id": "95d7153b-17ae-4ad5-b0e1-b27452244882",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Full Context",
        "height": 1000,
        "width": 1840,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1540,
        1380
      ],
      "typeVersion": 1,
      "id": "e3d10a94-5dd2-4e0e-8a38-957b8d95e2f8",
      "name": "Sticky Note6"
    }
  ],
  "connections": {
    "New Emails": {
      "main": [
        [
          {
            "node": "Fix 'From'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix 'From'": {
      "main": [
        [
          {
            "node": "Filter Inbound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Inbound": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Full Thread": {
      "main": [
        [
          {
            "node": "Reformat Thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reformat Thread": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Email Address": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "New Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Search Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Categorisation": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Call Sales Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call CSR Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Importance Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call CSR Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Sales Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Importance Scoring": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Notify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify": {
      "main": [
        [
          {
            "node": "In CRM?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Categorisation",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Categorisation",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Search Contact": {
      "main": [
        [
          {
            "node": "Existing Contact? ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Notes": {
      "main": [
        [
          {
            "node": "Format Notes into Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Notes into Markdown": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Existing Contact? ": {
      "main": [
        [
          {
            "node": "Get All Notes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Done",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Full Thread",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract Email Address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Fix Email Format",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Fix Email Format",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Fix Email Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Email Format": {
      "main": [
        [
          {
            "node": "Categorisation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Importance Scoring",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Importance Scoring",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Create Contact": {
      "main": [
        [
          {
            "node": "Create Note - Input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Name Finder",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Name Finder": {
      "main": [
        [
          {
            "node": "Create Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Name Finder",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create Note - Input": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Note - Input1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "In CRM?": {
      "main": [
        [
          {
            "node": "Create Note - Input",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Name Finder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "d41dc403-4785-4397-b786-8880c70f0abf",
  "triggerCount": 0,
  "tags": []
}