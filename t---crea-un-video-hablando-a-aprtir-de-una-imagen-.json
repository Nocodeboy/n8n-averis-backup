{
  "createdAt": "2025-05-01T07:28:48.552Z",
  "updatedAt": "2025-05-01T07:47:50.982Z",
  "id": "1AEKhU3qUn0Oqq0a",
  "name": "T - Crea un video hablando a aprtir de una imagen",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        220
      ],
      "id": "40e899fb-f8f7-4934-812e-95f09c4bbc6c",
      "name": "Telegram Trigger",
      "webhookId": "fdeef39d-c98c-42f6-973a-63ff44e46b8b"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.photo[3].file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -440,
        220
      ],
      "id": "3eea33eb-8a8e-41f5-a43a-82552955f860",
      "name": "Telegram",
      "webhookId": "f6f9456b-44d5-4bd7-9c34-5589539ebbd6"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1OQViKUJCN2N3e39ZFnJadQyFDiMcl1j3FcezRndtDvc",
          "mode": "list",
          "cachedResultName": "Image-to-Video Demo 123 - Post to Tiktok - Bulk Scheduler  - FabiMarkl.com",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1OQViKUJCN2N3e39ZFnJadQyFDiMcl1j3FcezRndtDvc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 740956331,
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1OQViKUJCN2N3e39ZFnJadQyFDiMcl1j3FcezRndtDvc/edit#gid=740956331"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Video URL": "={{ $('Video URL1').item.json.movie.url }}",
            "Video ID": "={{ $('VideoID').first().json.code }}",
            "Caption Text": "={{ $json.message.content }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Video ID",
              "displayName": "Video ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Caption Text",
              "displayName": "Caption Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Video URL",
              "displayName": "Video URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Publish Date",
              "displayName": "Publish Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1040,
        220
      ],
      "id": "97d691db-3480-4f2d-bda2-e58f7070676f",
      "name": "Google Sheets1"
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/file/botYOUR_BOT_TOKEN/{{ $('Telegram').item.json.result.file_path }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        0
      ],
      "id": "59fa46a6-bf5c-40ba-9794-57d692d58f76",
      "name": "Get Image"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.cloudinary.com/v1_1/INSERT_CLOUDINARY_ID/image/upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "INSERT_UPLOAD_PRESET_NAME"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        0
      ],
      "id": "9effc05d-93c1-4dfc-99e3-d932d1b37ca2",
      "name": "Upload Image"
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"model\": \"kling\",\n  \"task_type\": \"video_generation\",\n  \"input\": {\n    \"prompt\": \"{{ $('Split').item.json.videoPrompt }}\",\n    \"image_url\": \"{{ $json.secure_url }}\",\n    \"negative_prompt\": \"\",\n    \"cfg_scale\": 0.5,\n    \"duration\": 5,\n  \"version\": \"1.6\", \n    \"camera_control\": {\n      \"type\": \"simple\",\n      \"config\": {\n        \"horizontal\": 0,\n        \"vertical\": 0,\n        \"pan\": 0,\n        \"tilt\": 0,\n        \"roll\": 0,\n        \"zoom\": 0\n      }\n    },\n    \"mode\": \"std\"\n  },\n  \"config\": {\n    \"service_mode\": \"\",\n    \"webhook_config\": {\n      \"endpoint\": \"\",\n      \"secret\": \"\"\n    }\n  }\n}\n"
      },
      "id": "3bd52339-7052-44c9-a75d-9af0acef2b3c",
      "name": "Generate Video",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        460,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 2.5,
        "unit": "minutes"
      },
      "id": "1c24baa0-a8a6-4180-b6c5-d03fb7542a59",
      "name": "Wait For Video",
      "type": "n8n-nodes-base.wait",
      "position": [
        620,
        0
      ],
      "typeVersion": 1,
      "webhookId": "7d6609cd-65d4-4376-b6c7-6a15f230b707"
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "options": {}
      },
      "id": "23a8f467-a71a-4270-a92c-7052376aa1c0",
      "name": "Get Video URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        760,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "function generateRandomCode(length = 20) {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n}\n\nreturn [\n  {\n    json: {\n      code: generateRandomCode()\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "610162cb-1ebf-4b86-b929-e1778aac42f2",
      "name": "VideoID"
    },
    {
      "parameters": {
        "jsCode": "const input = $('Telegram Trigger').first().json.message.caption;\n\n// Remove \"Generate video\" from the start (case-insensitive)\nconst cleaned = input.replace(/^generate video/i, '').trim();\n\n// Split at the first comma\nconst [videoPrompt, captionIdea] = cleaned.split(/,(.+)/).map(s => s.trim());\n\nreturn [\n  {\n    json: {\n      videoPrompt,\n      captionIdea\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        220
      ],
      "id": "f79262ba-8492-4ef1-a98a-e6fa031673c8",
      "name": "Split"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        180,
        440
      ],
      "id": "0e6e9380-eaf4-4b78-a1f6-4659d1739d87",
      "name": "Wait3",
      "webhookId": "35000e97-8090-4c45-ba32-481cdc4ab6e8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.json2video.com/v2/movies",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"qbaasr7s\",\n  \"resolution\": \"instagram-story\",\n  \"quality\": \"high\",\n  \"scenes\": [\n    {\n      \"id\": \"qyjh9lwj\",\n      \"comment\": \"Scene 1\",\n      \"elements\": []\n    }\n  ],\n  \"elements\": [\n    {\n      \"id\": \"q6dznzcv\",\n      \"type\": \"video\",\n      \"src\": \"{{ $json.data.output.works[0].video.resource_without_watermark }}\",\n      \"resize\": \"cover\"\n    },\n    {\n      \"id\": \"top-text\",\n      \"type\": \"text\",\n      \"text\": \"{{ $('Wait1').item.json.hook }}\",\n      \"settings\": {\n        \"font-family\": \"Libre Baskerville\",\n        \"font-size\": \"60px\",\n        \"color\": \"#000000\",\n        \"background-color\": \"#FFFFFF\",\n        \"horizontal-position\": \"center\",\n        \"vertical-position\": \"top\",\n        \"margin-top\": \"50px\",\n        \"word-break\": \"break-word\",\n        \"overflow-wrap\": \"break-word\",\n        \"font-weight\": \"normal\",\n        \"text-align\": \"center\",\n        \"width\": \"80%\",\n        \"padding\": \"0\",\n        \"line-height\": \"1\",\n        \"margin\": \"50px 0 0 0\"\n      }\n    },\n    {\n      \"id\": \"q41n9kxp\",\n      \"type\": \"subtitles\",\n      \"settings\": {\n        \"style\": \"classic-progressive\",\n        \"position\": \"bottom\",\n        \"font-family\": \"Oswald\",\n        \"font-size\": 150,\n        \"word-color\": \"#ffd700\",\n        \"shadow-color\": \"#260B1B\",\n        \"line-color\": \"#F1E7F4\",\n        \"shadow-offset\": 0,\n        \"box-color\": \"#260B1B\",\n        \"outline-color\": \"#000000\",\n        \"outline-width\": 8\n      },\n      \"language\": \"en\"\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        300,
        440
      ],
      "id": "39064263-9d0a-4ba3-910e-b4b9d2ecc16a",
      "name": "Add Captions"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        420,
        440
      ],
      "id": "2dc23f85-48f6-47ff-ba34-2169814381f7",
      "name": "Wait4",
      "webhookId": "2fc5c017-1db6-4204-8f35-ee43b09519b5"
    },
    {
      "parameters": {
        "url": "=https://api.json2video.com/v2/movies?id={{ $json.project }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        440
      ],
      "id": "9cdc6d01-a7a1-454e-a0b4-cb65b6ca7dec",
      "name": "Video URL1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "=Here's your scheduled video:  \n\n----------------  \n\nCaption Text: {{ $json['Caption Text'] }}  \n\n----------------  \n\nVideo Link: {{ $json['Video URL'] }}",
        "replyMarkup": "forceReply",
        "forceReply": {},
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1180,
        220
      ],
      "id": "9b41f526-3ef7-4e36-9f51-ea354b5123a9",
      "name": "Telegram2",
      "webhookId": "4d3b01f3-1e23-400d-b5da-66bba88e04c2"
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $json.result.chat.id }}",
        "file": "={{ $('Google Sheets1').item.json['Video URL'] }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1320,
        220
      ],
      "id": "b7e825f8-22aa-4fa2-8d9e-105a8698bc58",
      "name": "Telegram1",
      "webhookId": "b33612ad-0a59-4d49-8cf8-7750e4c62d29"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=Write a short social media caption based on this voiceover: \n\n{{ $('Voice Script').item.json.message.content }}\n\nMake it actionable, but not sound generic or motivational. Maybe some highly specific tips, or a problem along with a solution. and add 2 relevant hashtags. And only one sentence per line and empty line between each sentence. Then encourage to comment with a keyword if they want to get the real solution.\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        700,
        440
      ],
      "id": "5a84544b-75e9-4246-9d01-37c0ec4978c6",
      "name": "Caption Text"
    },
    {
      "parameters": {
        "amount": 9.5,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -60,
        440
      ],
      "id": "955a6120-2979-4066-b8d4-27d9776b42ff",
      "name": "Wait",
      "webhookId": "1c53ef64-d15a-4f67-97e2-25a1c11b3973"
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://api.piapi.ai/api/v1/task/{{ $('Generate Lip Sync').item.json.data.task_id }}",
        "options": {}
      },
      "id": "7ff8f8cc-c748-4f89-8b2f-1c7a7e523b3f",
      "name": "Get Video URL1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        60,
        440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"model\": \"kling\",\n  \"task_type\": \"lip_sync\",\n  \"input\": {\n    \"origin_task_id\": \"{{ $('Generate Video').item.json.data.task_id }}\",\n    \"local_dubbing_url\": \"{{ $json.url }}\"\n  }\n}"
      },
      "id": "1ab7c533-1c7c-491c-8633-7b315cb8bf44",
      "name": "Generate Lip Sync",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        800,
        220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/INSERT_VOICE_ID",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_a4a9987851a1f4fd940d7a930efef59218bfa4ad63c9631e"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{ $json.script }}\",\n  \"model_id\": \"eleven_multilingual_v2\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.9\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        300,
        220
      ],
      "id": "275e342a-23d4-4a6e-ab13-43f46a728256",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.cloudinary.com/v1_1/INSERT_CLOUDINARY_ID/auto/upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "INSERT_UPLOAD_PRESET_NAME"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        220
      ],
      "id": "f03ab27c-0af7-4bdd-b2a2-148e023b7668",
      "name": "Upload Voice"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        440,
        220
      ],
      "id": "a061bebc-93b2-4f91-87c4-f5b77a8a2e65",
      "name": "Wait1",
      "webhookId": "b4753283-446b-4420-9c52-3210de01da43"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        680,
        220
      ],
      "id": "9c311b34-c569-4e0c-91f6-77cad282c4e7",
      "name": "Wait2",
      "webhookId": "08dc76d2-15e6-4da5-b653-950feb18e260"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert copywriter for short-form social videos.\n\nYour task is to write two types of texts:\n\n1) Voice Over:\n\nGenerate a text over the voice over for a video. Your text must be 13 words. Make it sound the person would actually say this so it should be from first person perspective and using words that seem to be spoken.\n\nThis is the voice over topic:\n{{ $('Split').item.json.captionIdea }}\n\n#Rule: Give me only the raw voice over script without any introductions like \"Here' is your voice over script.\" and do not use apostriopes like this \" in the output.\n\n2) Compelling hook:\n\n**one short, insanley curiosity invoking open loop type text line** for a vertical video. These will be used as text overlays (top and bottom) in the video. Should have exactly 40 Characters.\n\nThis is the hook topic:\n{{ $('Split').first().json.captionIdea }}\n\nModel this example as exact as possible including \"...\" end:\nI broke up with ChatGPT, this AI “gets me” much better...\n\n✂️ Rules to deliver the output:\n\n- Do NOT return anything except:\n script: SCRIPT TEXT\n hook: HOOK TEXT\n\n- No quotes, no brackets, no emojis\n- Avoid hashtags, titles, or introductions\n\n---\n\n\n\n\n\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -120,
        220
      ],
      "id": "abf9aa31-89b7-4a1f-92a1-96a1cb2f63e1",
      "name": "Voice Script"
    },
    {
      "parameters": {
        "jsCode": "const aiOutput = $input.first().json.message.content; // or wherever your AI response is\n\nconst lines = aiOutput.split('\\n').map(l => l.trim());\nlet script = \"\";\nlet hook = \"\";\n\nfor (const line of lines) {\n  if (line.toLowerCase().startsWith(\"script:\")) {\n    script = line.replace(/^script:\\s*/i, '').trim();\n  } else if (line.toLowerCase().startsWith(\"hook:\")) {\n    hook = line.replace(/^hook:\\s*/i, '').trim();\n  }\n}\n\nreturn [\n  {\n    json: {\n      script,\n      hook\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        220
      ],
      "id": "d2a5b6c3-3dfc-4741-9e88-b9e504835536",
      "name": "Split Script and Hook"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "Split",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets1": {
      "main": [
        [
          {
            "node": "Telegram2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Image": {
      "main": [
        [
          {
            "node": "Upload Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Image": {
      "main": [
        [
          {
            "node": "Generate Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video": {
      "main": [
        [
          {
            "node": "Wait For Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait For Video": {
      "main": [
        [
          {
            "node": "Get Video URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video URL": {
      "main": [
        [
          {
            "node": "Voice Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VideoID": {
      "main": [
        [
          {
            "node": "Get Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split": {
      "main": [
        [
          {
            "node": "VideoID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Captions": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        [
          {
            "node": "Video URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Add Captions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video URL1": {
      "main": [
        [
          {
            "node": "Caption Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram2": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Caption Text": {
      "main": [
        [
          {
            "node": "Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get Video URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Lip Sync": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Voice": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video URL1": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Upload Voice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Generate Lip Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice Script": {
      "main": [
        [
          {
            "node": "Split Script and Hook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Script and Hook": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "8000c385-e79c-4ce3-857c-37b7171ced7c",
  "triggerCount": 0,
  "tags": []
}