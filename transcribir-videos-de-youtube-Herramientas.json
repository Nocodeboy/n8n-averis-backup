{
  "createdAt": "2025-05-01T12:58:23.935Z",
  "updatedAt": "2025-05-12T13:27:43.001Z",
  "id": "wQxI6Oaee6SDQRwi",
  "name": "Transcribir videos de Youtube",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "formTitle": "Transcribe videos de Youtube",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Pega aquí la url del vídeo",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "id": "526d76c4-3168-4bad-8a6a-55783cdb7267",
      "name": "YoutubeVideoURL",
      "type": "n8n-nodes-base.formTrigger",
      "position": [
        440,
        -160
      ],
      "webhookId": "156a04c8-917d-4624-a46e-8fbcab89d16b",
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7653a859-556d-4e00-bafa-6f70f90de0d7",
              "name": "transcript",
              "type": "string",
              "value": "={{ $json.cleanedTranscript }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2545a0ee-d327-4a5c-95b4-8ec58e9ae041",
      "name": "cleanedTranscript",
      "type": "n8n-nodes-base.set",
      "position": [
        1200,
        -160
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "functionCode": "// Extract and process the transcript\nconst data = $input.first().json;\n\nif (!data.transcript && !data.text) {\n  return {\n    json: {\n      success: false,\n      message: 'No transcript available for this video',\n      videoUrl: $input.first().json.body?.videoUrl || 'Unknown'\n    }\n  };\n}\n\n// Process the transcript text\nlet transcriptText = '';\n\n// Handle different API response formats\nif (data.transcript) {\n  // Format for array of transcript segments\n  if (Array.isArray(data.transcript)) {\n    data.transcript.forEach(segment => {\n      if (segment.text) {\n        transcriptText += segment.text + ' ';\n      }\n    });\n  } else if (typeof data.transcript === 'string') {\n    transcriptText = data.transcript;\n  }\n} else if (data.text) {\n  // Format for single transcript object with text property\n  transcriptText = data.text;\n}\n\n// Clean up the transcript (remove extra spaces, normalize punctuation)\nconst cleanedTranscript = transcriptText\n  .replace(/\\s+/g, ' ')\n  .replace(/\\s([.,!?])/g, '$1')\n  .trim();\n\nreturn {\n  json: {\n    success: true,\n    videoUrl: $input.first().json.body?.videoUrl || 'From transcript',\n    rawTranscript: data.text || data.transcript,\n    cleanedTranscript,\n    duration: data.duration,\n    offset: data.offset,\n    language: data.lang\n  }\n};"
      },
      "id": "191a8441-c914-48f9-b59a-9e2c58ee319e",
      "name": "processTranscript",
      "type": "n8n-nodes-base.function",
      "position": [
        960,
        -160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "https://youtube-transcript3.p.rapidapi.com/api/transcript",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "videoId",
              "value": "ZacjOVVgoLY"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-rapidapi-host",
              "value": "youtube-transcript3.p.rapidapi.com"
            },
            {
              "name": "x-rapidapi-key",
              "value": "c10140d2dfmsh5432f3e2b32c5a9p12152ejsn9e132768f4bb"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json['Youtube Video Url'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "47b71475-0e94-4221-9c31-6fb1ca633d3c",
      "name": "extractTranscript",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        700,
        -160
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "folderId": "1Kt_762eM3bHygQN1xjR25CDnrDipmXEz",
        "title": "Transcripción_de_youtube"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        1640,
        -160
      ],
      "id": "0390adad-c480-49b6-a26f-1b2243a78681",
      "name": "Google Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "ntZBdzP2C1HbXzDM",
          "name": "Google Docs daniel@averis.es"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $json.id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $('Code').item.json.text }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        1860,
        -160
      ],
      "id": "db6af976-874c-4caa-93c0-3e6822debc78",
      "name": "Google Docs1",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "ntZBdzP2C1HbXzDM",
          "name": "Google Docs daniel@averis.es"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtiene el texto desde el input correctamente\nconst inputText = $input.first().json.transcript || \"\";\n\n// Reemplaza entidades HTML comunes\nlet formatted = inputText\n  .replace(/&#39;/g, \"'\")\n  .replace(/&quot;/g, '\"')\n  .replace(/&amp;/g, '&');\n\n// Añade saltos de párrafo tras signos de puntuación\nformatted = formatted.replace(/([.?!])\\s+/g, \"$1\\n\\n\");\n\n// Capitaliza el inicio de cada párrafo (muy básico)\nformatted = formatted.replace(/(?:^|\\n\\n)([a-z])/g, (match, p1) =>\n  match.replace(p1, p1.toUpperCase())\n);\n\n// Devuelve el resultado como item único\nreturn [\n  {\n    json: {\n      text: formatted\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        -160
      ],
      "id": "1db58d68-66c4-49bb-8219-06b33d707d63",
      "name": "Code"
    }
  ],
  "connections": {
    "YoutubeVideoURL": {
      "main": [
        [
          {
            "node": "extractTranscript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extractTranscript": {
      "main": [
        [
          {
            "node": "processTranscript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processTranscript": {
      "main": [
        [
          {
            "node": "cleanedTranscript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanedTranscript": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs": {
      "main": [
        [
          {
            "node": "Google Docs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "287a4a49-7788-4596-9f59-8bf93fa5ab6c",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-05-01T13:17:17.440Z",
      "updatedAt": "2025-05-01T13:17:17.440Z",
      "id": "1FpYT57UebXvb0tm",
      "name": "Herramientas"
    },
    {
      "createdAt": "2025-04-29T17:30:10.868Z",
      "updatedAt": "2025-04-29T17:30:10.868Z",
      "id": "e3fgSwFGMK2mFM4N",
      "name": "Youtube"
    }
  ]
}