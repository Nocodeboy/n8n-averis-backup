{
  "createdAt": "2025-05-03T08:16:56.192Z",
  "updatedAt": "2025-05-14T16:52:39.096Z",
  "id": "ovotVGdLMnsLfhy9",
  "name": "Crea la documentaci√≥n para flujos de trabajo en n8n",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b48986ec-f58d-4a7f-afba-677edcb28d31",
              "name": "project_path",
              "type": "string",
              "value": "./.n8n/test_docs"
            },
            {
              "id": "cf632419-f839-4045-922c-03784bb3ae07",
              "name": "instance_url",
              "type": "string",
              "value": "={{$env[\"N8N_PROTOCOL\"]}}://{{$env[\"N8N_HOST\"]}}"
            },
            {
              "id": "7a7c70a6-1853-4ca7-b5b1-e36bb0e190d0",
              "name": "HTML_headers",
              "type": "string",
              "value": "= <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n <meta charset=\"UTF-8\" />\n <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@4/themes/vue.css\" />\n <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>"
            },
            {
              "id": "1e785afe-f05f-4e51-a164-f341da81ccac",
              "name": "HTML_styles_editor",
              "type": "string",
              "value": "= <style>\n body {\n margin: 0;\n padding: 0;\n overflow: hidden;\n }\n \n .container {\n display: flex;\n flex-direction: column;\n height: 100vh;\n margin: 0;\n }\n\n .button-container {\n display: flex;\n justify-content: center;\n gap: 10px;\n padding: 10px;\n background: #f8f8f8;\n border-bottom: 1px solid #eee;\n width: 50%;\n }\n\n .button {\n padding: 8px 16px;\n border: none;\n border-radius: 4px;\n cursor: pointer;\n font-size: 14px;\n }\n\n .save-button {\n background: #42b983;\n color: white;\n }\n\n .cancel-button {\n background: #666;\n color: white;\n }\n\n .editor-preview-container {\n display: flex;\n flex: 1;\n overflow: hidden;\n }\n \n #editor {\n width: 50%;\n height: 100%;\n resize: none;\n padding: 20px;\n box-sizing: border-box;\n font-family: monospace;\n border: none;\n border-right: 1px solid #eee;\n }\n \n .preview-container {\n width: 50%;\n height: 100%;\n overflow-y: auto;\n }\n\n /* Remove width from main */\n main {\n width: auto !important;\n }\n\n /* Fix code block wrapping */\n .markdown-section pre > code {\n white-space: pre-wrap !important;\n }\n </style>"
            },
            {
              "id": "37e22865-7b6b-438d-83a0-dc680d4775cc",
              "name": "HTML_docsify_include",
              "type": "string",
              "value": "= <script src=\"//cdn.jsdelivr.net/npm/docsify@4\"></script>"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "a189dd08-ba4b-4a16-ac70-c598d32bb966",
      "name": "CONFIG",
      "type": "n8n-nodes-base.set",
      "position": [
        -3960,
        320
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "workflowdata",
        "options": {}
      },
      "id": "8c9a5a02-0824-4dcf-bbf1-c141fdb3b23a",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        -600,
        1860
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "2d9feb22-49d1-4354-9b0b-b82da2b20678",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "leftValue": "={{ Object.keys($json).length }}",
              "rightValue": 0
            }
          ]
        },
        "options": {}
      },
      "id": "b8d02c31-5e32-46fa-a670-a9338aa270ce",
      "name": "HasFile?",
      "type": "n8n-nodes-base.if",
      "position": [
        -2220,
        1140
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "operation": "text",
        "destinationKey": "workflowdata",
        "options": {}
      },
      "id": "e87dd330-1763-429e-b4de-ad6ce844ad1e",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -1960,
        1120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html>\n <head>\n{{ $('CONFIG').first().json.HTML_headers }}\n <body>\n <div data-app id=\"main\">Please wait...</div>\n <script>\n \n mermaid.initialize({\n startOnLoad: false,\n });\n let svgCounter = 0;\n\n window.$docsify = {\n el: '#main',\n auto2top: true,\n loadSidebar: 'summary.md',\n basePath: '{{ $json.webhookUrl.split($json.webhookUrl.extractDomain())[1] }}/',\n name: 'All Workflows',\n markdown: {\n renderer: {\n code(code, lang) {\n if (lang === \"mermaid\") {\n const svgName = `mermaid-svg-${svgCounter++}`;\n const MERMAID_CONTAINER_ID = `${svgName}-container`;\n mermaid.render(svgName, code).then(({ svg }) => {\n const containerElement = document.querySelector(\n `#${MERMAID_CONTAINER_ID}`\n );\n if (containerElement) {\n containerElement.innerHTML = svg;\n } else {\n console.error(`Error: #${MERMAID_CONTAINER_ID} not found`);\n }\n });\n return `<div class=\"mermaid\" id=\"${MERMAID_CONTAINER_ID}\"></div>`;\n }\n return this.origin.code.apply(this, arguments);\n },\n },\n }, \n plugins: [\n function(hook, vm) {\n hook.ready(function() {\n // Check if URL doesn't end with slash but also isn't a file path\n if (!window.location.pathname.endsWith('/') && !window.location.pathname.includes('.')) {\n // Use history.replaceState to avoid adding to browser history\n const newUrl = window.location.pathname + '/' + window.location.hash;\n window.history.replaceState(null, null, newUrl);\n }\n });\n }\n ], \n };\n </script>\n{{ $('CONFIG').first().json.HTML_docsify_include }}\n </body>\n</html>"
      },
      "id": "43a3ce96-7237-4d1a-8b0c-121ed2c70da3",
      "name": "Main Page",
      "type": "n8n-nodes-base.html",
      "position": [
        40,
        160
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "html": "# Your n8n instance workflows:\n\n| Workflow | Status | Docs | Created | Updated | Nodes | Triggers |\n|----------|:------:|------|---------|---------|-------|----------|\n{{ $jmespath($input.all(),'[].json.content').join('\\n') }}"
      },
      "id": "4a9cf4f2-b7a2-4906-aaf7-4a6343eb294f",
      "name": "Instance overview",
      "type": "n8n-nodes-base.html",
      "position": [
        40,
        420
      ],
      "executeOnce": true,
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "updatedAt",
              "order": "descending"
            }
          ]
        },
        "options": {}
      },
      "id": "a1766291-a633-4399-a647-0336d66ac446",
      "name": "Sort-workflows",
      "type": "n8n-nodes-base.sort",
      "position": [
        -2540,
        420
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "ee386c7d-1abe-4864-bb3a-a19d3816c906",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.query.action }}",
                    "rightValue": "view"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "view"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "aa1a33ee-ac38-4ea4-9a4c-d355e7de1312",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.query.action }}",
                    "rightValue": "edit"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "edit"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "676c36e1-4c88-4314-9317-abc877ff3d17",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.query.action }}",
                    "rightValue": "recreate"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "recreate"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "164314cf-7d99-4716-9949-b9196ce47959",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.query.action }}",
                    "rightValue": "save"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "save"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "f3f4be59-22e0-443f-8f3b-3b6e7c614005",
      "name": "doc action",
      "type": "n8n-nodes-base.switch",
      "position": [
        -2880,
        1340
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "61cf2fce-85c8-486d-a490-bb8a19ce6d4c",
      "name": "Empty Set",
      "type": "n8n-nodes-base.set",
      "position": [
        -2620,
        1220
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "fileSelector": "={{ $('CONFIG').first().json.project_path }}/{{ $json.params.file }}",
        "options": {}
      },
      "id": "c9bc652c-8a77-45d8-b7b1-1077f9d753ce",
      "name": "Load Doc File",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        -2720,
        1120
      ],
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/markdown"
              }
            ]
          }
        }
      },
      "id": "ee302b68-b99d-4077-bb90-bc8ab60cbfb3",
      "name": "Respond with markdown",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        300,
        1300
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "id": "82121c6c-74d3-41f3-9e14-0c543ea65b34",
      "name": "Respond with HTML",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        300,
        1120
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('CONFIG').first().json.project_path }}/{{ $('CONFIG').first().json.params.file }}",
        "options": {}
      },
      "id": "55d9b810-ade9-43a4-922e-44430ba7f019",
      "name": "Save New Doc File",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        -440,
        1860
      ],
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b168d9b1-1a13-4915-b59b-8a17258fd9cc",
              "name": "workflowdata",
              "type": "string",
              "value": "=# {{ $json.name }}\n\n## Workflow Description\n!> Please write what is this workflow doing\n\n## Workflow schematic\n\n```mermaid\n{{ $json.mermaidChart }}\n```\n\n## Any further information\n\n> You can also add tables like this:\n\n| Parameter | Value |\n|-----------|-------|\n| Created | {{ $json.createdAt }} |\n| Last updated | {{ $json.updatedAt }} |\n| Author | {{ $json.shared[0].project.name }} |\n\n"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "16bcf3f7-0d7f-4b65-ad36-cba71cdfc364",
      "name": "Blank Doc File",
      "type": "n8n-nodes-base.set",
      "position": [
        -620,
        1340
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "get",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('CONFIG').first().json.params.file.replaceAll('docs_','').split('.md')[0] }}"
        },
        "requestOptions": {}
      },
      "id": "34855662-c9da-40cb-9590-e242fb26ce06",
      "name": "Fetch Single Workflow1",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -1800,
        1460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3bed44f3-7fa6-4d28-8a6e-7074ca354cd6",
              "name": "content",
              "type": "string",
              "value": "=| [{{ `${$json.name.replace(/[|\\\\[\\]`_*{}()<>#+-]/g, '\\\\$&')}` }}]({{ `${$('CONFIG').first().json.instance_url}/workflow/${$json.id}` }} \"Click to open workflow in n8n\") | {{ $json.active ? '[:green_circle:](# \"Active\")' : '[:white_circle:](# \"Inactive\")' }} | <nobr>[:book:]({{ `docs_${$json.id}?action=view` }} \"View docs\") [:memo:]({{ `docs_${$json.id}.md?action=edit` }} \":ignore Edit\") [:arrows_counterclockwise:]({{ `docs_${$json.id}?action=recreate` }} \"Recreate docs\")</nobr> | <nobr>{{ `${new Date($json.createdAt).toISOString().replace('T', ' ').slice(0, 16)}` }}</nobr> | <nobr>{{ `${new Date($json.updatedAt).toISOString().replace('T', ' ').slice(0, 16)}` }}</nobr> | {{ $json.nodes.length }} | {{ $json.nodes.filter(n => n.type.includes('Trigger')).length }} |"
            }
          ]
        },
        "options": {}
      },
      "id": "ddcc8955-a2f3-4c2f-ba5a-6003b4f63193",
      "name": "Fill Workflow Table",
      "type": "n8n-nodes-base.set",
      "position": [
        -2340,
        420
      ],
      "executeOnce": false,
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here's the workflow data:\n{{Object.assign(\n Object.fromEntries(Object.entries($json).filter(([key]) => !['staticData', 'pinData'].includes(key))),\n {nodes: $json.nodes.map(node => Object.fromEntries(Object.entries(node).filter(([key]) => !['id', 'position'].includes(key))))}\n).toJsonString() }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Your task is to generate simple workflow documentation for the n8n workflows. The user will provide a JSON structure. Reply \nin JSON format in 2 sections: workflow_desription and nodes_settings. Important! Each json key should be a simple markdown text without any additional comments or remarks from your end.\n\nInstruction for `workflow_desription`:\n```\n## Section header with H2\n\\n\n> subline with who created workflow and when, when it was last edited and the status (active / inactive as the green / grey round emoji). Also, when the documentation was generated. Now is: {{ $now }}.\n\\n\\n\nShould contain a description of the workflow. in a couple of paragraphs. Use direct voice without the fluff\n```\n\nInstruction for `nodes_settings`:\n```\n## Section header with H2.\n\\n\n### Node 1 name as H3 title\n - For each node make a bullet list with the main node configs. Ignore irrelevant configs. Enclose each config value in code backticks (`). Look:\n - Parameter 1 name: `Parameter 1 value`\n - Parameter 2 name: `Parameter 2 value`\n\\n\\n\n### Node 2 name as H3 title\n - For each node make a bullet list with the main node configs. Ignore irrelevant configs. Enclose each config value in code backticks (`). Look:\n - Parameter 1 name: `Parameter 1 value`\n - Parameter 2 name: `Parameter 2 value`\n\\n\\n\n```"
            }
          ]
        }
      },
      "id": "218a34f3-eaca-40d9-a840-8a76672a35a0",
      "name": "Basic LLM Chain",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -1140,
        1460
      ],
      "typeVersion": 1.4,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "gpt-4-turbo",
        "options": {
          "temperature": 0.2,
          "timeout": 120000
        }
      },
      "id": "2c47831e-de77-4384-917f-20e65486a9d6",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -1140,
        1620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"workflow_description\": \"## Workflow overview\\n\\n>some additiona info\\n\\nWorkflow desctiption\",\n\t\"nodes_settings\": \"## Nodes settings\\n\\n###Node name 1\\n\\n- Setting 1\\n- Setting 2###Node name 2\\n\\n- Setting 1\\n- Setting 2\"\n}"
      },
      "id": "5a3a053f-02dc-4cce-a270-00d74cabac57",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -800,
        1620
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3d78c58b-9bf9-4eab-bed7-e1eceb35ac5c",
      "name": "Auto-fixing Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "position": [
        -1000,
        1660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "id": "faf1f951-dab4-4b2f-995b-46c04f9dd66e",
      "name": "Respond with main page HTML",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        300,
        160
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "html": "- **Click to filter by tag:**\n{{ [...new Set($jmespath($input.all(),'[].json.tags[].name'))].map(tag => `- [${tag}](tag-${encodeURIComponent(tag)})`).join('\\n') }}"
      },
      "id": "5063e50e-c1cf-46d0-9b4a-d577dc00818c",
      "name": "Workflow Tags",
      "type": "n8n-nodes-base.html",
      "position": [
        40,
        760
      ],
      "executeOnce": true,
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "id": "6f74998c-80fe-4c48-99be-36ce3ddca09f",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -2880,
        2140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "id": "5b8125d0-2429-469d-9317-8dc16b3e20a9",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        -1480,
        1360
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "html": "> File: {{ $json.params.file }}"
      },
      "id": "4e35c19d-f731-4d36-af7b-1fe9c4d82037",
      "name": "Fallback file name",
      "type": "n8n-nodes-base.html",
      "position": [
        40,
        2160
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "command": "=mkdir -p {{$('CONFIG').first().json.project_path}}"
      },
      "id": "6fec5a66-5f70-4d3a-9eed-2c0c1673e20a",
      "name": "mkdir",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        -2520,
        1320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "id": "30655141-3c56-42c9-a6c1-18c342c4385d",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "position": [
        -2380,
        1140
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html>\n <head>\n{{ $('CONFIG').first().json.HTML_headers }}\n{{ $('CONFIG').first().json.HTML_styles_editor }}\n </head>\n <body>\n <div class=\"container\">\n <div class=\"button-container\">\n <button class=\"button save-button\" onclick=\"saveContent()\">Save</button>\n <button class=\"button cancel-button\" onclick=\"closeWindow()\">Cancel</button>\n </div>\n <div class=\"editor-preview-container\">\n <textarea id=\"editor\">{{ $json.workflowdata }}</textarea>\n <div class=\"preview-container\">\n <div id=\"preview\"></div>\n </div>\n </div>\n </div>\n \n<script>\n const editor = document.getElementById('editor');\n let vm;\n\n mermaid.initialize({\n startOnLoad: false,\n });\n\n let svgCounter = 0;\n\n // Function to save content\n async function saveContent() {\n try {\n const response = await fetch(window.location.pathname + '?action=save', {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n },\n body: JSON.stringify({\n content: editor.value\n })\n });\n \n if (response.ok) {\n alert('Successfully saved!');\n } else {\n alert('Failed to save content');\n }\n } catch (error) {\n console.error('Error saving content:', error);\n alert('Error saving content');\n }\n }\n \n // Function to close window\n function closeWindow() {\n window.close();\n }\n \n window.$docsify = {\n el: '#preview',\n loadSidebar: false,\n loadNavbar: false,\n basePath: '/',\n hideSidebar: true,\n markdown: {\n renderer: {\n code(code, lang) {\n if (lang === \"mermaid\") {\n const svgName = `mermaid-svg-${svgCounter++}`;\n const MERMAID_CONTAINER_ID = `${svgName}-container`;\n mermaid.render(svgName, code).then(({ svg }) => {\n const containerElement = document.querySelector(\n `#${MERMAID_CONTAINER_ID}`\n );\n if (containerElement) {\n containerElement.innerHTML = svg;\n } else {\n console.error(`Error: #${MERMAID_CONTAINER_ID} not found`);\n }\n });\n return `<div class=\"mermaid\" id=\"${MERMAID_CONTAINER_ID}\"></div>`;\n }\n return this.origin.code.apply(this, arguments);\n },\n },\n },\n plugins: [\n function(hook, _vm) {\n vm = _vm;\n \n hook.beforeEach(function(content) {\n return editor.value;\n });\n }\n ]\n };\n \nlet timeout;\nfunction updatePreview() {\n clearTimeout(timeout);\n timeout = setTimeout(() => {\n if (vm) {\n const markdownSection = document.querySelector('.markdown-section');\n if (markdownSection) {\n const compiler = new window.DocsifyCompiler({\n basePath: '/',\n relativePath: false,\n fallbackLanguages: [],\n nameLink: '/',\n routerMode: 'hash'\n }, vm.router);\n \n const html = compiler.compile(editor.value);\n markdownSection.innerHTML = html;\n window.Prism.highlightAll();\n\n // Re-render all mermaid diagrams\n const mermaidDivs = markdownSection.querySelectorAll('pre[data-lang=\"mermaid\"] code');\n mermaidDivs.forEach((div, index) => {\n const code = div.textContent;\n const svgName = `mermaid-svg-${svgCounter++}`;\n const MERMAID_CONTAINER_ID = `${svgName}-container`;\n \n // Replace the <pre> element with our container\n const container = document.createElement('div');\n container.className = 'mermaid';\n container.id = MERMAID_CONTAINER_ID;\n div.parentElement.replaceWith(container);\n \n // Render the diagram\n mermaid.render(svgName, code).then(({ svg }) => {\n const containerElement = document.getElementById(MERMAID_CONTAINER_ID);\n if (containerElement) {\n containerElement.innerHTML = svg;\n }\n });\n });\n }\n }\n }, 500);\n};\n \n editor.addEventListener('input', updatePreview);\n</script>\n{{ $('CONFIG').first().json.HTML_docsify_include }}\n </body>\n</html>"
      },
      "id": "375f51de-f51a-4e58-8c71-ee6f1b32aaff",
      "name": "Edit Page",
      "type": "n8n-nodes-base.html",
      "position": [
        40,
        1120
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "html": "{{ $json.workflowdata }}"
      },
      "id": "bb7754db-42db-4c97-a90d-d5b9dd13bc5a",
      "name": "Workflow md content",
      "type": "n8n-nodes-base.html",
      "position": [
        40,
        1300
      ],
      "executeOnce": true,
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "856cdb3b-a187-4db5-b77b-43ee086780ee",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.query.action }}",
              "rightValue": "edit"
            }
          ]
        },
        "options": {}
      },
      "id": "28b588ec-75a9-4544-a10e-705071a71329",
      "name": "Is Action Edit?1",
      "type": "n8n-nodes-base.if",
      "position": [
        -1320,
        1360
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e3648023-8cb7-4b82-bd35-1ba196458327",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.query.action }}",
              "rightValue": "edit"
            }
          ]
        },
        "options": {}
      },
      "id": "03c063ab-71e5-4b60-b3b5-9674729ec491",
      "name": "Is Action Edit?2",
      "type": "n8n-nodes-base.if",
      "position": [
        -440,
        1140
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "jsCode": "const workflow = $input.first().json;\n\n// Extract nodes from the workflow\nconst nodes = workflow.nodes || [];\n\n// Node types to exclude\nconst excludedNodeTypes = ['n8n-nodes-base.stickyNote'];\n\n// Define shapes and their corresponding brackets\n// https://mermaid.js.org/syntax/flowchart.html\nconst shapes = {\n 'rect': ['[', ']'],\n 'rhombus': ['{', '}'],\n 'circle': ['((', '))'],\n 'hexagon': ['{{', '}}'],\n 'subroutine': ['[[', ']]'],\n 'parallelogram': ['[\\/', '\\/]'],\n 'wait': ['(', ')']\n // Add more shapes here as needed\n};\n\n// Define special shapes for specific node types\nconst specialShapes = {\n 'n8n-nodes-base.if': 'rhombus',\n 'n8n-nodes-base.switch': 'rhombus',\n 'n8n-nodes-base.code': 'subroutine',\n 'n8n-nodes-base.executeWorkflow': 'subroutine',\n 'n8n-nodes-base.httpRequest':'parallelogram',\n 'n8n-nodes-base.wait':'wait'\n // List more special node types\n};\n\n// Function to get the shape for a node type\nfunction getNodeShape(nodeType) {\n return specialShapes[nodeType] || 'rect';\n}\n\n// Create a map of node names to their \"EL<N>\" identifiers, disabled status, and shape\nconst nodeMap = {};\nlet nodeCounter = 1;\nnodes.forEach((node) => {\n if (!excludedNodeTypes.includes(node.type)) {\n const shape = getNodeShape(node.type);\n nodeMap[node.name] = {\n id: `EL${nodeCounter}`,\n disabled: node.disabled || false,\n shape: shape,\n brackets: shapes[shape] || shapes['rect'] // Default to rect if shape not found\n };\n nodeCounter++;\n }\n});\n\n// Function to convert special characters to HTML entities\nfunction convertToHTMLEntities(str) {\n return str.replaceAll('\"',\"'\").replace(/[^\\w\\s-]/g, function(char) {\n return '&#' + char.charCodeAt(0) + ';';\n });\n}\n\n// Function to format node text (with strike-through if disabled)\nfunction formatNodeText(nodeName, isDisabled) {\n const escapedName = convertToHTMLEntities(nodeName);\n return isDisabled ? `<s>${escapedName}</s>` : escapedName;\n}\n\n// Generate connections and isolated nodes\nconst connections = [];\nconst isolatedNodes = new Set(Object.keys(nodeMap));\n\nif (workflow.connections) {\n Object.entries(workflow.connections).forEach(([sourceName, targetConnections]) => {\n Object.entries(targetConnections).forEach(([connectionType, targets]) => {\n targets.forEach(targetArray => {\n targetArray.forEach(target => {\n const sourceNode = nodeMap[sourceName];\n const targetNode = nodeMap[target.node];\n if (sourceNode && targetNode) {\n let connectionLine = ` ${sourceNode.id}${sourceNode.brackets[0]}${formatNodeText(sourceName, sourceNode.disabled)}${sourceNode.brackets[1]}`;\n if (connectionType === 'main') {\n connectionLine += ` -->`;\n } else {\n connectionLine += ` -.- |${connectionType}|`;\n }\n connectionLine += ` ${targetNode.id}${targetNode.brackets[0]}${formatNodeText(target.node, targetNode.disabled)}${targetNode.brackets[1]}`;\n connections.push(connectionLine);\n isolatedNodes.delete(sourceName);\n isolatedNodes.delete(target.node);\n }\n });\n });\n });\n });\n}\n\n// Add isolated nodes to the connections array\nisolatedNodes.forEach(nodeName => {\n const node = nodeMap[nodeName];\n connections.push(` ${node.id}${node.brackets[0]}${formatNodeText(nodeName, node.disabled)}${node.brackets[1]}`);\n});\n\n// Generate the Mermaid flowchart string\nconst mermaidChart = `---\nconfig:\n look: neo\n theme: default\n---\nflowchart LR\n${connections.join('\\n')}`;\n\n// Output the result\nreturn {\n json: {\n mermaidChart: mermaidChart\n }\n};"
      },
      "id": "3907ba2a-dc36-42a5-b091-e38e888f7065",
      "name": "Generate Mermaid Chart",
      "type": "n8n-nodes-base.code",
      "position": [
        -1620,
        1520
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "c5a31d8e-3e46-45b1-85b8-8be38813860b",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "position": [
        -780,
        1400
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7693348d-5129-4a07-809d-b0619b9fc44b",
              "name": "workflowdata",
              "type": "string",
              "value": "=# {{ $json.name }}\n\n{{ $json?.output?.workflow_description || \"## <SORRY, COULD NOT GENERATE WORKFLOW DESCRIPTION>\" }}\n\n## Workflow schematic\n\n```mermaid\n{{ $json.mermaidChart }}\n```\n\n{{ $json?.output?.nodes_settings || \"## <SORRY, COULD NOT GENERATE DOCS FOR NODE SETTING>\" }}"
            }
          ]
        },
        "options": {}
      },
      "id": "24ffe2f9-e65e-4f3d-b6a6-d4bb1d5f1d7e",
      "name": "Generated Doc",
      "type": "n8n-nodes-base.set",
      "position": [
        -620,
        1500
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {},
      "id": "d27481ae-e8d8-41f2-b0fe-e674423aee35",
      "name": "Passthrough",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -2520,
        1500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "be05e3b0-0da9-4027-88d7-83b441b7f344",
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "position": [
        -1480,
        1140
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "178fbbec-08ca-4bd1-899c-ff4f018eb36e",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "position": [
        -3660,
        160
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "cd73ae7f-ed7c-4b09-8eef-a4679dc6413e",
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "position": [
        -3660,
        500
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8bc55c5b-e09a-459b-bbb6-ed5f70d4f353",
              "name": "workflowdata",
              "type": "string",
              "value": "={{ $json.body.content }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "fc1fb015-479d-4f49-aef2-6f96202d85b9",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        -2520,
        1860
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e3648023-8cb7-4b82-bd35-1ba196458327",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json?.query?.action }}",
              "rightValue": "save"
            },
            {
              "id": "a44c9cc5-5717-4c34-978b-e644219a9cc1",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json?.query?.action }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "c802e32e-ef05-4b0f-8229-a131d840d8bf",
      "name": "Is Action Save?",
      "type": "n8n-nodes-base.if",
      "position": [
        -80,
        1860
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "id": "82c32906-f997-457a-8112-9b1b5dcda6e6",
      "name": "Merge6",
      "type": "n8n-nodes-base.merge",
      "position": [
        -260,
        1960
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "id": "d4894281-cfdc-4d2f-a456-9bcf12f5de0f",
      "name": "Respond OK on Save",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        300,
        1840
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "multipleMethods": true,
        "path": "/:file",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "5f6c7b11-d05e-4c5b-aad7-6e055e1f2461",
      "name": "single workflow",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -4380,
        500
      ],
      "webhookId": "135bc21f-c7d0-4afe-be73-f984d444b43b",
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## Main Docsify webhook\nIn response, n8n serves the main html page with the [Docsify JS library](https://docsify.js.org/)",
        "height": 277.9529846153844,
        "width": 296.5956923076922
      },
      "id": "029567b2-e3b9-4cff-a3e9-b1408a40544c",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4480,
        20
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Single page requests\n* Docsify may request default pages (i.e. `readme.md` or a `summary.md`)\n* GET request for the workflow documentation pages\n* POST request for saving manually edited doc page",
        "height": 287.9568584558579,
        "width": 509.1040245093486
      },
      "id": "8c7070bc-6242-48cf-bb61-b9704926b18f",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4700,
        360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## EDIT THIS!\n* `project_path` to link to a writable directory that is accessible to n8n\n* update `instance_url` when running in the cloud version. If using in self-hosted mode, make sure N8N_PROTOCOL and N8N_HOST .env variables are correct",
        "height": 462.9720128227216,
        "width": 489.50636350106504,
        "color": 3
      },
      "id": "98f670d1-4f4c-47bd-a3ab-120fc8f314b2",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4160,
        20
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "endsWith"
                    },
                    "leftValue": "={{ $json.params.file.toLowerCase() }}",
                    "rightValue": ".md"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": ".md"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "unknown"
        }
      },
      "id": "81bb240f-cbd5-4edf-a36d-fc6c75e8bfcf",
      "name": "file types",
      "type": "n8n-nodes-base.switch",
      "position": [
        -3440,
        500
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "content": "## Construct main HTML page and send it back to the user\n* `HTML_headers` and `HTML_docsify_include` are stored in the CONFIG node for the page simplicity",
        "height": 309.89805271694365,
        "width": 446.67466982248516
      },
      "id": "18fa2465-690d-4644-a25c-515c2ea6ba78",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {
          "tags": "={{ decodeURIComponent(($json.params.file?.match(/^tag-(.+)\\.md$/))?.[1] || '') }}"
        },
        "requestOptions": {}
      },
      "id": "a3e71472-d2c6-4572-a99d-7be71c3d6f1e",
      "name": "Get All Workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -2740,
        420
      ],
      "typeVersion": 1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "## Serve main Markdown table with the workflow overview\n*NOTE! Here we don't reply with HTML content. Only Markdown elements are sent back and processed by the JS library*\n* Create an overall table when `README.md` (the home page) is requested\n* Create a table with a subset of workflows when a tag from a navigation pane is selected",
        "height": 307.51990359708003,
        "width": 820.1843305645202
      },
      "id": "477256af-b71f-41c2-b7a0-e6ebf5bb7c5d",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2840,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.params.file }}",
                    "rightValue": "README.md"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "README.md"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "c1c1aecc-8faa-47ea-b831-4674c3c0db61",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "leftValue": "={{ $json.params.file }}",
                    "rightValue": "docs_"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "docs"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "fde643c9-31cd-4cbd-b4de-99a8ad6202af",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.params.file }}",
                    "rightValue": "summary.md"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "summary.md"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "df4bc9f8-9285-49a6-b31c-d7173bf42901",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "leftValue": "={{ $json.params.file }}",
                    "rightValue": "tag-"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "tags"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "eefb5b42-4c67-42d0-9139-f27ae45d32dc",
      "name": "md files",
      "type": "n8n-nodes-base.switch",
      "position": [
        -3180,
        440
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "8b7dea1e-af5f-409d-999b-af7845f52cbc",
      "name": "Get Workflow tags",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -2740,
        760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Serve left pane content\n* Here all workflows are fetched again when `summary.md` file is requested.\n\nIt contains Markdown for the left navigation pane: a list of all tags",
        "height": 288.20835077550953,
        "width": 817.6163848212657
      },
      "id": "ef18ded3-aaf9-4f56-83a6-b273ce665e73",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2840,
        620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Handle missing pages\nServe the Markdown content with the requested file name for edge cases, i.e. any unexpected files",
        "height": 262.5093167050718,
        "width": 367.8950651848079
      },
      "id": "e2ff362c-cdf4-40bd-ba63-afcec8f51be9",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2920,
        2040
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# Main functionality here\n\n## * View existing documentation\n## * Auto-generate doc page if no file available\n## * Re-created autodoc page\n## * Edit doc page: LIVE Markdown editor included!\n## * Save edited file. WARNING! No authentication",
        "height": 1142.0268674813442,
        "width": 4161.578473434268,
        "color": 6
      },
      "id": "8eee495f-317a-4276-ad4c-844aae096602",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3600,
        980
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Custom markdown editor\nThis is another HTML page for the live Markdown editor\n* `Mermaid.js` is supported\n* Docsify preview on edit\n* Save or Cancel buttons",
        "height": 268.0620091282372,
        "width": 652.3100890494833
      },
      "id": "5bfbabc4-c6cb-4413-b259-1bb3df65cd5d",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -160,
        1000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Save new file\nOnce the doc page is generated or edited manually, a Markdown files is saved in the directory",
        "height": 348.0868581511653,
        "width": 522.870786668288
      },
      "id": "0c83ed1b-95bd-47e4-949f-716dfaf1efcf",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -620,
        1760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Load existing doc file\nCheck the existing file when the View or Edit button is pressed\n",
        "height": 429.7891698152571,
        "width": 639.8696984316115
      },
      "id": "e4d57a5d-2682-49ad-807b-515e082204c7",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2740,
        1020
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## If the file is not available, then:\n* either auto-generate new doc\n* prepare a basic template for editing",
        "height": 466.42237140646773,
        "width": 1369.2986733206085
      },
      "id": "94b02a27-f794-499c-8f01-fc8e41f65f2b",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1840,
        1280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "path": "135bc21f-c7d0-4afe-be73-f984d444b43b",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "6d4a9404-4d7d-435c-b9e7-ecae89146c29",
      "name": "docsify",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -4380,
        160
      ],
      "webhookId": "8b719afe-8be3-4cd5-84ed-aca521b31a89",
      "typeVersion": 2
    }
  ],
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Is Action Edit?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mkdir": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "CONFIG": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "HasFile?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Generated Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Is Action Edit?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Main Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "file types",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Is Action Save?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "docsify": {
      "main": [
        [
          {
            "node": "CONFIG",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HasFile?": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fetch Single Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "md files": {
      "main": [
        [
          {
            "node": "Get All Workflows",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "doc action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Workflow tags",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get All Workflows",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Page": {
      "main": [
        [
          {
            "node": "Respond with HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty Set": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Main Page": {
      "main": [
        [
          {
            "node": "Respond with main page HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "doc action": {
      "main": [
        [
          {
            "node": "mkdir",
            "type": "main",
            "index": 0
          },
          {
            "node": "Load Doc File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Passthrough",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "mkdir",
            "type": "main",
            "index": 0
          },
          {
            "node": "Load Doc File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Passthrough",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "mkdir",
            "type": "main",
            "index": 0
          },
          {
            "node": "Empty Set",
            "type": "main",
            "index": 0
          },
          {
            "node": "Passthrough",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "file types": {
      "main": [
        [
          {
            "node": "md files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Passthrough": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generated Doc": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Action Edit?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Doc File": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Tags": {
      "main": [
        [
          {
            "node": "Respond with markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Blank Doc File": {
      "main": [
        [
          {
            "node": "Is Action Edit?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort-workflows": {
      "main": [
        [
          {
            "node": "Fill Workflow Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Save New Doc File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Action Save?": {
      "main": [
        [
          {
            "node": "Respond OK on Save",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "single workflow": {
      "main": [
        [
          {
            "node": "CONFIG",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "CONFIG",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Is Action Edit?1": {
      "main": [
        [
          {
            "node": "Blank Doc File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Action Edit?2": {
      "main": [
        [
          {
            "node": "Edit Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow md content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Workflows": {
      "main": [
        [
          {
            "node": "Sort-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Workflow tags": {
      "main": [
        [
          {
            "node": "Workflow Tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instance overview": {
      "main": [
        [
          {
            "node": "Respond with markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Save New Doc File": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fallback file name": {
      "main": [
        [
          {
            "node": "Respond with markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fill Workflow Table": {
      "main": [
        [
          {
            "node": "Instance overview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow md content": {
      "main": [
        [
          {
            "node": "Respond with markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Single Workflow1": {
      "main": [
        [
          {
            "node": "Generate Mermaid Chart",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate Mermaid Chart": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Fallback file name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "3ecfb0ed-a947-46eb-82d5-bfbb1d189393",
  "triggerCount": 0,
  "tags": []
}